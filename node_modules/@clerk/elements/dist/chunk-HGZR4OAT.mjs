var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);

// src/react/common/index.ts
import "client-only";

// src/react/common/form/field.tsx
import { Field as RadixField, ValidityState as RadixValidityState } from "@radix-ui/react-form";
import * as React7 from "react";

// src/internals/machines/form/form.context.ts
import { createActorContext } from "@xstate/react";

// src/internals/machines/form/form.machine.ts
import { isClerkAPIResponseError, isKnownError, isMetamaskError } from "@clerk/shared/error";
import { snakeToCamel } from "@clerk/shared/underscore";
import { assign, enqueueActions, setup } from "xstate";

// src/internals/errors/index.ts
var ClerkElementsErrorBase = class extends Error {
  constructor(code, message) {
    super(message);
    this.code = code;
    this.clerkError = true;
    this.clerkElementsError = true;
    this.name = "ClerkElementsError";
    this.rawMessage = message;
  }
  toString() {
    return `[${this.name}]
Code: ${this.code}
Message: ${this.message}`;
  }
};
var ClerkElementsError = class _ClerkElementsError extends ClerkElementsErrorBase {
  static fromAPIError(error) {
    return new _ClerkElementsError(
      error.code.toString(),
      // @ts-expect-error - Expected that longMessage isn't a property of MetamaskError
      error.longMessage || error.message
    );
  }
  constructor(code, message) {
    super(code, message);
    this.name = "ClerkElementsError";
  }
};
var ClerkElementsRuntimeError = class extends ClerkElementsErrorBase {
  constructor(message) {
    super("elements_runtime_error", message);
    this.name = "ClerkElementsRuntimeError";
  }
};
var ClerkElementsFieldError = class _ClerkElementsFieldError extends ClerkElementsErrorBase {
  constructor(code, message) {
    super(code, message);
    this.matchFn = () => true;
    this.name = "ClerkElementsFieldError";
  }
  static fromAPIError(error) {
    return new _ClerkElementsFieldError(error.code, error.longMessage || error.message);
  }
  get validityState() {
    return this.code;
  }
  get forceMatch() {
    return true;
  }
};

// src/internals/machines/form/form.machine.ts
var FormMachine = setup({
  actions: {
    setGlobalErrors: assign({
      errors: (_, params) => [...params.errors]
    }),
    setFieldFeedback: assign({
      fields: ({ context }, params) => {
        if (!params.name) {
          throw new Error("Field name is required");
        }
        if (context.fields.has(params.name)) {
          context.fields.get(params.name).feedback = params.feedback;
        }
        return context.fields;
      }
    })
  },
  types: {}
}).createMachine({
  id: "Form",
  context: () => ({
    defaultValues: /* @__PURE__ */ new Map(),
    errors: [],
    fields: /* @__PURE__ */ new Map(),
    progressive: false
  }),
  on: {
    "ERRORS.SET": {
      actions: enqueueActions(({ enqueue, event }) => {
        var _a, _b, _c;
        const isClerkAPIError = (err) => "meta" in err;
        if (isKnownError(event.error)) {
          const fields = {};
          const globalErrors = [];
          const errors = isClerkAPIResponseError(event.error) ? (_a = event.error) == null ? void 0 : _a.errors : [event.error];
          for (const error of errors) {
            const name = isClerkAPIError(error) ? snakeToCamel((_b = error.meta) == null ? void 0 : _b.paramName) : null;
            if (!name || isMetamaskError(error)) {
              globalErrors.push(ClerkElementsError.fromAPIError(error));
              continue;
            }
            if (!fields[name]) {
              fields[name] = [];
            }
            (_c = fields[name]) == null ? void 0 : _c.push(ClerkElementsFieldError.fromAPIError(error));
          }
          enqueue({
            type: "setGlobalErrors",
            params: {
              errors: globalErrors
            }
          });
          for (const field in fields) {
            enqueue({
              type: "setFieldFeedback",
              params: {
                name: field,
                feedback: {
                  type: "error",
                  message: fields[field][0]
                }
              }
            });
          }
        }
      })
    },
    "ERRORS.CLEAR": {
      actions: assign({
        errors: () => []
      })
    },
    "FIELD.ADD": {
      actions: assign({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          event.field.value = event.field.value || context.defaultValues.get(event.field.name) || void 0;
          context.fields.set(event.field.name, event.field);
          return context.fields;
        }
      })
    },
    "FIELD.UPDATE": {
      actions: assign({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          const field = context.fields.get(event.field.name);
          if (field) {
            field.checked = event.field.checked;
            field.disabled = event.field.disabled || false;
            field.value = event.field.value;
            context.fields.set(event.field.name, field);
          }
          return context.fields;
        }
      })
    },
    "FIELD.DISABLE": {
      actions: assign({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          const field = context.fields.get(event.field.name);
          if (field) {
            field.disabled = true;
            context.fields.set(event.field.name, field);
          }
          return context.fields;
        }
      })
    },
    "FIELD.ENABLE": {
      actions: assign({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          const field = context.fields.get(event.field.name);
          if (field) {
            field.disabled = false;
            context.fields.set(event.field.name, field);
          }
          return context.fields;
        }
      })
    },
    "FIELD.REMOVE": {
      actions: assign({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          context.fields.delete(event.field.name);
          return context.fields;
        }
      })
    },
    "FIELD.FEEDBACK.SET": {
      actions: [
        {
          type: "setFieldFeedback",
          params: ({ event }) => event.field
        }
      ]
    },
    "FIELD.FEEDBACK.CLEAR": {
      actions: assign({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          if (context.fields.has(event.field.name)) {
            context.fields.get(event.field.name).feedback = void 0;
          }
          return context.fields;
        }
      })
    },
    "FIELD.FEEDBACK.CLEAR.ALL": {
      actions: assign({
        fields: ({ context }) => {
          context.fields.forEach((field) => {
            field.feedback = void 0;
          });
          return context.fields;
        }
      })
    },
    MARK_AS_PROGRESSIVE: {
      actions: assign(({ event }) => {
        const missing = new Set(event.missing);
        return {
          defaultValues: event.defaultValues,
          hidden: /* @__PURE__ */ new Set([...event.required.filter((f) => !missing.has(f)), ...event.optional]),
          missing,
          optional: new Set(event.optional),
          progressive: true,
          required: new Set(event.required)
        };
      })
    },
    UNMARK_AS_PROGRESSIVE: {
      actions: assign({
        defaultValues: /* @__PURE__ */ new Map(),
        hidden: void 0,
        missing: void 0,
        optional: void 0,
        progressive: false,
        required: void 0
      })
    },
    PREFILL_DEFAULT_VALUES: {
      actions: assign(({ event }) => {
        return {
          defaultValues: event.defaultValues
        };
      })
    }
  }
});

// src/utils/safe-access.ts
function safeAccess(fn, fallback) {
  try {
    return fn();
  } catch (e) {
    return fallback;
  }
}

// src/internals/utils/inspector/index.ts
var inspect;
if (false) {
  inspect = (_a = getBrowserInspector()) != null ? _a : getConsoleInspector();
}

// src/internals/machines/form/form.context.ts
var FormMachineContext = createActorContext(FormMachine, { inspect });
var FormStoreProvider = FormMachineContext.Provider;
var useFormStore = FormMachineContext.useActorRef;
var useFormSelector = FormMachineContext.useSelector;
var globalErrorsSelector = (state) => state.context.errors;
var fieldValueSelector = (name) => (state) => {
  var _a;
  return name ? (_a = state.context.fields.get(name)) == null ? void 0 : _a.value : "";
};
var fieldHasValueSelector = (name) => (state) => Boolean(fieldValueSelector(name)(state));
var fieldFeedbackSelector = (name) => (state) => {
  var _a;
  return name ? (_a = state.context.fields.get(name)) == null ? void 0 : _a.feedback : void 0;
};

// src/react/common/form/hooks/use-field-feedback.ts
function useFieldFeedback({ name }) {
  const feedback = useFormSelector(fieldFeedbackSelector(name));
  return {
    feedback
  };
}

// src/react/common/form/hooks/use-field.ts
function useField({ name }) {
  const hasValue = useFormSelector(fieldHasValueSelector(name));
  const { feedback } = useFieldFeedback({ name });
  const shouldBeHidden = false;
  const hasError = feedback ? feedback.type === "error" : false;
  return {
    hasValue,
    props: {
      "data-hidden": shouldBeHidden ? true : void 0,
      serverInvalid: hasError
    }
  };
}

// src/react/common/form/hooks/use-field-context.ts
import * as React from "react";
var FieldContext = React.createContext(null);
var useFieldContext = () => React.useContext(FieldContext);

// src/react/common/form/types.ts
var FIELD_STATES = {
  success: "success",
  error: "error",
  idle: "idle",
  warning: "warning",
  info: "info"
};

// src/react/common/form/hooks/use-field-state.ts
function useFieldState({ name }) {
  const { feedback } = useFieldFeedback({ name });
  const hasValue = useFormSelector(fieldHasValueSelector(name));
  let state = FIELD_STATES.idle;
  if (!hasValue) {
    state = FIELD_STATES.idle;
  }
  switch (feedback == null ? void 0 : feedback.type) {
    case "error":
      state = FIELD_STATES.error;
      break;
    case "warning":
      state = FIELD_STATES.warning;
      break;
    case "info":
      state = FIELD_STATES.info;
      break;
    case "success":
      state = FIELD_STATES.success;
      break;
    default:
      break;
  }
  return {
    state
  };
}

// src/react/common/form/hooks/use-form.ts
import { useCallback } from "react";

// src/react/common/form/hooks/use-global-errors.ts
function useGlobalErrors() {
  const errors = useFormSelector(globalErrorsSelector);
  return {
    errors
  };
}

// src/react/common/form/hooks/use-form.ts
function useForm({ flowActor }) {
  const { errors } = useGlobalErrors();
  const onSubmit = useCallback(
    (event) => {
      event.preventDefault();
      if (flowActor) {
        flowActor.send({ type: "SUBMIT", action: "submit" });
      }
    },
    [flowActor]
  );
  return {
    props: {
      ...errors.length > 0 ? { "data-global-error": true } : {},
      onSubmit
    }
  };
}

// src/react/common/form/hooks/use-input.tsx
import { Control as RadixControl2 } from "@radix-ui/react-form";
import * as React6 from "react";

// src/react/hooks/use-password.hook.ts
import { noop } from "@clerk/shared";
import { useClerk } from "@clerk/shared/react";
import * as React2 from "react";

// src/react/utils/generate-password-error-text.ts
var errorMessages = {
  max_length: ["less than %length% characters", "length"],
  min_length: ["%length% or more characters", "length"],
  require_numbers: "a number",
  require_lowercase: "a lowercase letter",
  require_uppercase: "an uppercase letter",
  require_special_char: "a special character"
};
var createListFormat = (message) => {
  let messageWithPrefix;
  if ("ListFormat" in Intl) {
    const formatter = new Intl.ListFormat("en", { style: "long", type: "conjunction" });
    messageWithPrefix = formatter.format(message);
  } else {
    messageWithPrefix = message.join(", ");
  }
  return messageWithPrefix;
};
function buildErrorTuple(key, config) {
  switch (key) {
    case "max_length":
      return [key, { max_length: config.max_length }];
    case "min_length":
      return [key, { min_length: config.min_length }];
    case "require_special_char":
      return [key, { allowed_special_characters: config.allowed_special_characters }];
    default:
      return key;
  }
}
var generatePasswordErrorText = ({ config, failedValidations }) => {
  const codes = [];
  if (!failedValidations || Object.keys(failedValidations).length === 0) {
    return {
      codes,
      message: ""
    };
  }
  const hasMinLengthError = (failedValidations == null ? void 0 : failedValidations.min_length) || false;
  const messages = Object.entries(failedValidations).filter((k) => hasMinLengthError ? k[0] === "min_length" : true).filter(([, v]) => !!v).map(([k]) => {
    const entry = k;
    const errorTuple = buildErrorTuple(entry, config);
    codes.push(errorTuple);
    const errorKey = errorMessages[entry];
    if (Array.isArray(errorKey)) {
      const [msg, replaceValue] = errorKey;
      return msg.replace(`%${replaceValue}%`, config[k]);
    }
    return errorKey;
  });
  const messageWithPrefix = createListFormat(messages);
  return {
    codes,
    message: `Your password must contain ${messageWithPrefix}.`
  };
};

// src/react/hooks/use-password.hook.ts
var usePassword = (callbacks) => {
  var _a;
  const clerk = useClerk();
  const passwordSettings = (_a = clerk.__unstable__environment) == null ? void 0 : _a.userSettings.passwordSettings;
  const { disable_hibp, min_zxcvbn_strength, show_zxcvbn, ...config } = passwordSettings || {};
  const {
    onValidationError = noop,
    onValidationSuccess = noop,
    onValidationWarning = noop,
    onValidationInfo = noop,
    onValidationComplexity
  } = callbacks || {};
  const onValidate = React2.useCallback(
    (res) => {
      var _a2, _b, _c;
      if (res.complexity) {
        if (Object.values(res == null ? void 0 : res.complexity).length > 0) {
          const { message, codes } = generatePasswordErrorText({
            config,
            failedValidations: res.complexity
          });
          if ((_a2 = res.complexity) == null ? void 0 : _a2.min_length) {
            return onValidationInfo(message, codes);
          }
          return onValidationError(message, codes);
        }
      }
      if (((_b = res == null ? void 0 : res.strength) == null ? void 0 : _b.state) === "fail") {
        const keys = res.strength.keys;
        const error = keys.map((key) => get(zxcvbnKeys, key)).join(" ");
        return onValidationError(error, keys);
      }
      if (((_c = res == null ? void 0 : res.strength) == null ? void 0 : _c.state) === "pass") {
        const keys = res.strength.keys;
        const error = keys.map((key) => get(zxcvbnKeys, key)).join(" ");
        return onValidationWarning(error, keys);
      }
      return onValidationSuccess();
    },
    [callbacks, config]
  );
  const validatePassword = React2.useMemo(() => {
    return (password) => {
      return clerk.client.signUp.validatePassword(password, {
        onValidation: onValidate,
        onValidationComplexity
      });
    };
  }, [onValidate]);
  return {
    validatePassword
  };
};
var get = (t, path) => path.split(".").reduce((r, k) => r == null ? void 0 : r[k], t);
var zxcvbnKeys = {
  unstable__errors: {
    zxcvbn: {
      couldBeStronger: "Your password works, but could be stronger. Try adding more characters.",
      goodPassword: "Your password meets all the necessary requirements.",
      notEnough: "Your password is not strong enough.",
      suggestions: {
        allUppercase: "Capitalize some, but not all letters.",
        anotherWord: "Add more words that are less common.",
        associatedYears: "Avoid years that are associated with you.",
        capitalization: "Capitalize more than the first letter.",
        dates: "Avoid dates and years that are associated with you.",
        l33t: "Avoid predictable letter substitutions like '@' for 'a'.",
        longerKeyboardPattern: "Use longer keyboard patterns and change typing direction multiple times.",
        noNeed: "You can create strong passwords without using symbols, numbers, or uppercase letters.",
        pwned: "If you use this password elsewhere, you should change it.",
        recentYears: "Avoid recent years.",
        repeated: "Avoid repeated words and characters.",
        reverseWords: "Avoid reversed spellings of common words.",
        sequences: "Avoid common character sequences.",
        useWords: "Use multiple words, but avoid common phrases."
      },
      warnings: {
        common: "This is a commonly used password.",
        commonNames: "Common names and surnames are easy to guess.",
        dates: "Dates are easy to guess.",
        extendedRepeat: 'Repeated character patterns like "abcabcabc" are easy to guess.',
        keyPattern: "Short keyboard patterns are easy to guess.",
        namesByThemselves: "Single names or surnames are easy to guess.",
        pwned: "Your password was exposed by a data breach on the Internet.",
        recentYears: "Recent years are easy to guess.",
        sequences: 'Common character sequences like "abc" are easy to guess.',
        similarToCommon: "This is similar to a commonly used password.",
        simpleRepeat: 'Repeated characters like "aaa" are easy to guess.',
        straightRow: "Straight rows of keys on your keyboard are easy to guess.",
        topHundred: "This is a frequently used password.",
        topTen: "This is a heavily used password.",
        userInputs: "There should not be any personal or page related data.",
        wordByItself: "Single words are easy to guess."
      }
    }
  }
};

// src/react/common/form/otp.tsx
import { Control as RadixControl } from "@radix-ui/react-form";
import * as React3 from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var ZERO = [0, 0];
var OUTSIDE = [-1, -1];
var OTP_LENGTH_DEFAULT = 6;
var PASSWORD_MANAGER_OFFSET_DEFAULT = 40;
var OTPInput = React3.forwardRef(function OTPInput2(props, ref) {
  const { render, length, autoSubmit, ...rest } = props;
  const hasRenderProp = typeof render !== "undefined";
  if (hasRenderProp) {
    return /* @__PURE__ */ jsx(
      OTPInputSegmented,
      {
        ...rest,
        ref,
        render,
        length,
        autoSubmit
      }
    );
  }
  return /* @__PURE__ */ jsx(
    OTPInputStandard,
    {
      ...rest,
      ref,
      length,
      autoSubmit
    }
  );
});
var OTPInputStandard = React3.forwardRef(
  function OTPInput3(props, ref) {
    const { length = OTP_LENGTH_DEFAULT, autoSubmit = false, ...rest } = props;
    const innerRef = React3.useRef(null);
    React3.useImperativeHandle(ref, () => innerRef.current, []);
    React3.useEffect(() => {
      var _a, _b;
      if (String(props.value).length === length && autoSubmit) {
        (_b = (_a = innerRef.current) == null ? void 0 : _a.form) == null ? void 0 : _b.requestSubmit();
      }
    }, [props.value, length, autoSubmit]);
    return /* @__PURE__ */ jsx(
      RadixControl,
      {
        ref: innerRef,
        ...rest,
        "data-otp-input-standard": true
      }
    );
  }
);
var OTPInputSegmented = React3.forwardRef(
  function OTPInput4(props, ref) {
    const {
      className: userProvidedClassName,
      render,
      length = OTP_LENGTH_DEFAULT,
      autoSubmit = false,
      passwordManagerOffset = PASSWORD_MANAGER_OFFSET_DEFAULT,
      ...rest
    } = props;
    const innerRef = React3.useRef(null);
    const [selectionRange, setSelectionRange] = React3.useState(props.autoFocus ? ZERO : OUTSIDE);
    const [isHovering, setIsHovering] = React3.useState(false);
    const isFocused = () => document.activeElement === innerRef.current;
    React3.useImperativeHandle(ref, () => innerRef.current, []);
    React3.useLayoutEffect(() => {
      if (document.activeElement !== innerRef.current) {
        return;
      }
      setSelectionRange((cur) => selectionRangeUpdater(cur, innerRef));
    }, [props.value]);
    React3.useEffect(() => {
      function onSelectionChange() {
        if (!isFocused()) {
          return;
        }
        setSelectionRange((cur) => selectionRangeUpdater(cur, innerRef));
      }
      document.addEventListener("selectionchange", onSelectionChange, { capture: true });
      return () => document.removeEventListener("selectionchange", onSelectionChange);
    }, []);
    React3.useEffect(() => {
      var _a, _b;
      if (String(props.value).length === length && autoSubmit) {
        (_b = (_a = innerRef.current) == null ? void 0 : _a.form) == null ? void 0 : _b.requestSubmit();
      }
    }, [props.value, length, autoSubmit]);
    return /* @__PURE__ */ jsxs(
      "div",
      {
        "data-otp-input-wrapper": true,
        style: wrapperStyle,
        children: [
          /* @__PURE__ */ jsx("style", { children: `
      input[data-otp-input-segmented]::selection {
        color: transparent;
        background-color: transparent;
      }
      ` }),
          /* @__PURE__ */ jsx(
            RadixControl,
            {
              "data-otp-input-segmented": true,
              ref: innerRef,
              ...rest,
              onFocus: (event) => {
                var _a;
                if (innerRef.current) {
                  const start = Math.min(innerRef.current.value.length, length - 1);
                  const end = innerRef.current.value.length;
                  innerRef.current.setSelectionRange(start, end);
                  setSelectionRange([start, end]);
                }
                (_a = rest == null ? void 0 : rest.onFocus) == null ? void 0 : _a.call(rest, event);
              },
              onBlur: (event) => {
                var _a;
                setSelectionRange([-1, -1]);
                (_a = rest == null ? void 0 : rest.onBlur) == null ? void 0 : _a.call(rest, event);
              },
              onMouseOver: (event) => {
                var _a;
                if (!isFocused()) {
                  setIsHovering(true);
                }
                (_a = props.onMouseOver) == null ? void 0 : _a.call(props, event);
              },
              onMouseLeave: (event) => {
                var _a;
                setIsHovering(false);
                (_a = props.onMouseLeave) == null ? void 0 : _a.call(props, event);
              },
              style: {
                ...inputStyle,
                clipPath: `inset(0 calc(1ch + ${passwordManagerOffset}px) 0 0)`,
                width: `calc(100% + 1ch + ${passwordManagerOffset}px)`
              }
            }
          ),
          /* @__PURE__ */ jsx(
            "div",
            {
              className: userProvidedClassName,
              "aria-hidden": true,
              style: segmentWrapperStyle,
              children: Array.from({ length }).map((_, i) => {
                var _a, _b;
                const isHovered = isHovering && !isFocused();
                const isCursor = selectionRange[0] === selectionRange[1] && selectionRange[0] === i;
                const isSelected = ((_a = selectionRange[0]) != null ? _a : -1) <= i && ((_b = selectionRange[1]) != null ? _b : -1) > i;
                return /* @__PURE__ */ jsx(React3.Fragment, { children: render({
                  value: String(props.value)[i] || "",
                  status: isHovered ? "hovered" : isCursor ? "cursor" : isSelected ? "selected" : "none",
                  index: i
                }) }, `otp-segment-${i}`);
              })
            }
          )
        ]
      }
    );
  }
);
function selectionRangeUpdater(cur, inputRef) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i;
  let updated = [
    (_b = (_a = inputRef.current) == null ? void 0 : _a.selectionStart) != null ? _b : 0,
    (_d = (_c = inputRef.current) == null ? void 0 : _c.selectionEnd) != null ? _d : 0,
    (_f = (_e = inputRef.current) == null ? void 0 : _e.selectionDirection) != null ? _f : null
  ];
  if (cur[0] === updated[0] && cur[1] === updated[1]) {
    return cur;
  }
  if (updated[0] === 0 && updated[1] === 1) {
    updated[2] = "forward";
  }
  if (updated[0] === updated[1]) {
    if (updated[0] > 0 && cur[0] === updated[0] && cur[1] === updated[0] + 1) {
      updated = [updated[0] - 1, updated[1], "backward"];
    } else if (typeof ((_g = inputRef.current) == null ? void 0 : _g.value[updated[0]]) !== "undefined") {
      updated = [updated[0], updated[1] + 1, "backward"];
    } else if (updated[0] >= OTP_LENGTH_DEFAULT) {
      updated = [updated[0] - 1, updated[1], "backward"];
    }
  }
  (_i = inputRef.current) == null ? void 0 : _i.setSelectionRange(updated[0], updated[1], (_h = updated[2]) != null ? _h : void 0);
  return [updated[0], updated[1]];
}
var wrapperStyle = {
  position: "relative",
  userSelect: "none"
};
var inputStyle = {
  display: "block",
  background: "transparent",
  opacity: 0,
  outline: "transparent solid 0px",
  appearance: "none",
  color: "transparent",
  position: "absolute",
  inset: 0,
  caretColor: "transparent",
  border: "0px solid transparent",
  // width is handled inline
  height: "100%",
  letterSpacing: "-1rem"
};
var segmentWrapperStyle = {
  zIndex: 1,
  pointerEvents: "none"
};

// src/react/common/form/utils/enrich-field-state.ts
function enrichFieldState(validity, fieldState) {
  return (validity == null ? void 0 : validity.valid) === false ? FIELD_STATES.error : fieldState;
}

// src/react/common/form/utils/determine-input-type-from-name.ts
function determineInputTypeFromName(name) {
  if (name === "password" || name === "confirmPassword" || name === "currentPassword" || name === "newPassword") {
    return "password";
  }
  if (name === "emailAddress") {
    return "email";
  }
  if (name === "phoneNumber") {
    return "tel";
  }
  if (name === "code") {
    return "otp";
  }
  if (name === "backup_code") {
    return "backup_code";
  }
  return "text";
}

// src/react/common/form/hooks/use-previous.ts
import * as React4 from "react";
function usePrevious(value) {
  const ref = React4.useRef();
  React4.useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// src/react/common/form/hooks/use-validity-state-context.ts
import * as React5 from "react";
var ValidityStateContext = React5.createContext(void 0);
var useValidityStateContext = () => React5.useContext(ValidityStateContext);

// src/react/common/form/hooks/use-input.tsx
function useInput({
  name: inputName,
  value: providedValue,
  checked: providedChecked,
  onChange: onChangeProp,
  onBlur: onBlurProp,
  onFocus: onFocusProp,
  type: inputType,
  ...passthroughProps
}) {
  const fieldContext = useFieldContext();
  const rawName = inputName || (fieldContext == null ? void 0 : fieldContext.name);
  const name = rawName === "backup_code" ? "code" : rawName;
  const { state: fieldState } = useFieldState({ name });
  const validity = useValidityStateContext();
  if (!rawName || !name) {
    throw new Error("Clerk: <Input /> must be wrapped in a <Field> component or have a name prop.");
  }
  const ref = useFormStore();
  const [hasPassedValiation, setHasPassedValidation] = React6.useState(false);
  const { validatePassword } = usePassword({
    onValidationComplexity: (hasPassed) => setHasPassedValidation(hasPassed),
    onValidationSuccess: () => {
      ref.send({
        type: "FIELD.FEEDBACK.SET",
        field: { name, feedback: { type: "success", message: "Your password meets all the necessary requirements." } }
      });
    },
    onValidationError: (error, codes) => {
      if (error) {
        ref.send({
          type: "FIELD.FEEDBACK.SET",
          field: {
            name,
            feedback: {
              type: "error",
              message: new ClerkElementsFieldError("password-validation-error", error),
              codes
            }
          }
        });
      }
    },
    onValidationWarning: (warning, codes) => ref.send({
      type: "FIELD.FEEDBACK.SET",
      field: { name, feedback: { type: "warning", message: warning, codes } }
    }),
    onValidationInfo: (info, codes) => {
      ref.send({
        type: "FIELD.FEEDBACK.SET",
        field: {
          name,
          feedback: {
            type: "info",
            message: info,
            codes
          }
        }
      });
    }
  });
  const value = useFormSelector(fieldValueSelector(name));
  const prevValue = usePrevious(value);
  const hasValue = Boolean(value);
  const type = inputType != null ? inputType : determineInputTypeFromName(rawName);
  let nativeFieldType = type;
  let shouldValidatePassword = false;
  if (type === "password" || type === "text") {
    shouldValidatePassword = Boolean(passthroughProps.validatePassword);
  }
  if (nativeFieldType === "otp" || nativeFieldType === "backup_code") {
    nativeFieldType = "text";
  }
  React6.useEffect(() => {
    if (!name) {
      return;
    }
    ref.send({
      type: "FIELD.ADD",
      field: { name, type: nativeFieldType, value: providedValue, checked: providedChecked }
    });
    return () => ref.send({ type: "FIELD.REMOVE", field: { name } });
  }, [ref]);
  React6.useEffect(() => {
    if (!name) {
      return;
    }
    if (type === "checkbox" && providedChecked !== void 0 || type !== "checkbox" && providedValue !== void 0) {
      ref.send({
        type: "FIELD.UPDATE",
        field: { name, value: providedValue, checked: providedChecked }
      });
    }
  }, [name, type, ref, providedValue, providedChecked]);
  const onChange = React6.useCallback(
    (event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (!name) {
        return;
      }
      ref.send({ type: "FIELD.UPDATE", field: { name, value: event.target.value, checked: event.target.checked } });
      if (shouldValidatePassword) {
        validatePassword(event.target.value);
      }
    },
    [ref, name, onChangeProp, shouldValidatePassword, validatePassword]
  );
  const onBlur = React6.useCallback(
    (event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (shouldValidatePassword && event.target.value !== prevValue) {
        validatePassword(event.target.value);
      }
    },
    [onBlurProp, shouldValidatePassword, validatePassword, prevValue]
  );
  const onFocus = React6.useCallback(
    (event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (shouldValidatePassword && event.target.value !== prevValue) {
        validatePassword(event.target.value);
      }
    },
    [onFocusProp, shouldValidatePassword, validatePassword, prevValue]
  );
  const shouldBeHidden = false;
  const Element = type === "otp" ? OTPInput : RadixControl2;
  let props = {};
  if (type === "otp") {
    const p = passthroughProps;
    const length = p.length || OTP_LENGTH_DEFAULT;
    props = {
      "data-otp-input": true,
      autoComplete: "one-time-code",
      inputMode: "numeric",
      pattern: `[0-9]{${length}}`,
      minLength: length,
      maxLength: length,
      onChange: (event) => {
        event.currentTarget.value = event.currentTarget.value.replace(/\D+/g, "");
        onChange(event);
      },
      type: "text",
      spellCheck: false
    };
  } else if (type === "backup_code") {
    props = {
      autoComplete: "off",
      type: "text",
      spellCheck: false
    };
  } else if (type === "password" && shouldValidatePassword) {
    props = {
      "data-has-passed-validation": hasPassedValiation ? true : void 0
    };
  }
  const { validatePassword: _1, ...rest } = passthroughProps;
  return {
    Element,
    props: {
      type,
      value: value != null ? value : "",
      onChange,
      onBlur,
      onFocus,
      "data-hidden": shouldBeHidden ? true : void 0,
      "data-has-value": hasValue ? true : void 0,
      "data-state": enrichFieldState(validity, fieldState),
      ...props,
      ...rest
    }
  };
}

// src/react/common/form/field.tsx
import { jsx as jsx2 } from "react/jsx-runtime";
var DISPLAY_NAME = "ClerkElementsField";
var DISPLAY_NAME_INNER = "ClerkElementsFieldInner";
var Field = React7.forwardRef(({ alwaysShow, ...rest }, forwardedRef) => {
  var _a;
  const formRef = useFormStore();
  const formCtx = formRef.getSnapshot().context;
  const isHiddenField = formCtx.progressive && Boolean((_a = formCtx.hidden) == null ? void 0 : _a.has(rest.name));
  const shouldHide = alwaysShow ? false : isHiddenField;
  return shouldHide ? null : /* @__PURE__ */ jsx2(FieldContext.Provider, { value: { name: rest.name }, children: /* @__PURE__ */ jsx2(
    FieldInner,
    {
      ...rest,
      ref: forwardedRef
    }
  ) });
});
Field.displayName = DISPLAY_NAME;
var FieldInner = React7.forwardRef((props, forwardedRef) => {
  const { children, ...rest } = props;
  const field = useField({ name: rest.name });
  const { state: fieldState } = useFieldState({ name: rest.name });
  return /* @__PURE__ */ jsx2(
    RadixField,
    {
      ...field.props,
      ...rest,
      ref: forwardedRef,
      children: /* @__PURE__ */ jsx2(RadixValidityState, { children: (validity) => {
        const enrichedFieldState = enrichFieldState(validity, fieldState);
        return /* @__PURE__ */ jsx2(ValidityStateContext.Provider, { value: validity, children: typeof children === "function" ? children(enrichedFieldState) : children });
      } })
    }
  );
});
FieldInner.displayName = DISPLAY_NAME_INNER;

// src/react/common/form/field-error.tsx
import { FormMessage as RadixFormMessage } from "@radix-ui/react-form";
import { Slot } from "@radix-ui/react-slot";
import * as React9 from "react";

// src/react/utils/is-react-fragment.ts
import * as React8 from "react";
function isReactFragment(node) {
  return React8.isValidElement(node) && node.type === React8.Fragment;
}

// src/react/common/form/field-error.tsx
import { jsx as jsx3 } from "react/jsx-runtime";
var DISPLAY_NAME2 = "ClerkElementsFieldError";
var FieldError = React9.forwardRef(
  ({ asChild = false, children, code, name, ...rest }, forwardedRef) => {
    const fieldContext = useFieldContext();
    const rawFieldName = (fieldContext == null ? void 0 : fieldContext.name) || name;
    const fieldName = rawFieldName === "backup_code" ? "code" : rawFieldName;
    const { feedback } = useFieldFeedback({ name: fieldName });
    if (!((feedback == null ? void 0 : feedback.type) === "error")) {
      return null;
    }
    const error = feedback.message;
    if (!error) {
      return null;
    }
    const Comp = asChild ? Slot : "span";
    const child = typeof children === "function" ? children(error) : children;
    if (isReactFragment(child)) {
      throw new ClerkElementsRuntimeError("<FieldError /> cannot render a Fragment as a child.");
    }
    return /* @__PURE__ */ jsx3(
      RadixFormMessage,
      {
        "data-error-code": error.code,
        ...rest,
        ref: forwardedRef,
        asChild: true,
        children: /* @__PURE__ */ jsx3(Comp, { children: child || error.message })
      }
    );
  }
);
FieldError.displayName = DISPLAY_NAME2;

// src/react/common/form/field-state.tsx
var DISPLAY_NAME3 = "ClerkElementsFieldState";
function FieldState({ children }) {
  const field = useFieldContext();
  const { feedback } = useFieldFeedback({ name: field == null ? void 0 : field.name });
  const { state } = useFieldState({ name: field == null ? void 0 : field.name });
  const validity = useValidityStateContext();
  const message = (feedback == null ? void 0 : feedback.message) instanceof ClerkElementsFieldError ? feedback.message.message : feedback == null ? void 0 : feedback.message;
  const codes = feedback == null ? void 0 : feedback.codes;
  const fieldState = { state: enrichFieldState(validity, state), message, codes };
  return children(fieldState);
}
FieldState.displayName = DISPLAY_NAME3;

// node_modules/@radix-ui/primitive/dist/index.mjs
function composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler == null ? void 0 : originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented) {
      return ourEventHandler == null ? void 0 : ourEventHandler(event);
    }
  };
}

// src/react/common/form/form.tsx
import { Form as RadixForm } from "@radix-ui/react-form";
import * as React10 from "react";
import { jsx as jsx4 } from "react/jsx-runtime";
var DISPLAY_NAME4 = "ClerkElementsForm";
var Form = React10.forwardRef(({ flowActor, onSubmit, ...rest }, forwardedRef) => {
  const form = useForm({ flowActor });
  const { onSubmit: internalOnSubmit, ...internalFormProps } = form.props;
  return /* @__PURE__ */ jsx4(
    RadixForm,
    {
      ...internalFormProps,
      ...rest,
      onSubmit: composeEventHandlers(internalOnSubmit, onSubmit),
      ref: forwardedRef
    }
  );
});
Form.displayName = DISPLAY_NAME4;

// src/react/common/form/global-error.tsx
import { Slot as Slot2 } from "@radix-ui/react-slot";
import * as React11 from "react";
import { jsx as jsx5 } from "react/jsx-runtime";
var DISPLAY_NAME5 = "ClerkElementsGlobalError";
var GlobalError = React11.forwardRef(
  ({ asChild = false, children, code, ...rest }, forwardedRef) => {
    const { errors } = useGlobalErrors();
    const error = errors == null ? void 0 : errors[0];
    if (!error || code && error.code !== code) {
      return null;
    }
    const Comp = asChild ? Slot2 : "div";
    const child = typeof children === "function" ? children(error) : children;
    if (isReactFragment(child)) {
      throw new ClerkElementsRuntimeError("<GlobalError /> cannot render a Fragment as a child.");
    }
    return /* @__PURE__ */ jsx5(
      Comp,
      {
        role: "alert",
        ...rest,
        ref: forwardedRef,
        children: child || error.message
      }
    );
  }
);
GlobalError.displayName = DISPLAY_NAME5;

// src/react/common/form/input.tsx
import { logger } from "@clerk/shared/logger";
import { useClerk as useClerk2 } from "@clerk/shared/react";
import { eventComponentMounted } from "@clerk/shared/telemetry";
import * as React13 from "react";

// src/react/utils/create-context-from-actor-ref.ts
import { useSelector as useSelectorUnbound } from "@xstate/react";
import * as React12 from "react";
function createContextFromActorRef(displayName) {
  const ReactContext = React12.createContext(null);
  const OriginalProvider = ReactContext.Provider;
  function Provider({ children, actorRef }) {
    return React12.createElement(
      OriginalProvider,
      {
        value: actorRef
      },
      children
    );
  }
  Provider.displayName = displayName;
  function useContext9(allowMissingActor = false) {
    const actorRef = React12.useContext(ReactContext);
    if (!allowMissingActor && !actorRef) {
      throw new Error(
        `You used a hook from "${Provider.displayName}" but it's not inside a <${Provider.displayName}.Provider> component.`
      );
    }
    return actorRef;
  }
  function useSelector6(selector, compare) {
    const actor = useContext9();
    return useSelectorUnbound(actor, selector, compare);
  }
  return {
    Provider,
    useActorRef: useContext9,
    useSelector: useSelector6
  };
}

// src/react/sign-in/context/router.context.ts
var SignInRouterCtx = createContextFromActorRef("SignInRouterCtx");
function useSignInStep(name) {
  return SignInRouterCtx.useSelector((state) => state.children[name]);
}
var useSignInStartStep = () => useSignInStep("start");
var useSignInFirstFactorStep = () => useSignInStep("firstFactor");
var useSignInSecondFactorStep = () => useSignInStep("secondFactor");
var useSignInResetPasswordStep = () => useSignInStep("resetPassword");
var useSignInPasskeyAutofill = () => SignInRouterCtx.useSelector((state) => state.context.webAuthnAutofillSupport);

// src/react/sign-in/context/sign-in-strategy.context.ts
import { createContext as createContext4, useContext as useContext4 } from "react";
var SignInStrategyContext = createContext4({
  strategy: void 0
});
function useSignInStrategy() {
  const ctx = useContext4(SignInStrategyContext);
  if (!ctx) {
    throw new ClerkElementsRuntimeError(
      "useSignInStrategy must be used within a <SignIn.Strategy> or <SignIn.SupportedStrategy> component."
    );
  }
  const { strategy } = ctx;
  return strategy;
}

// src/react/sign-in/context/strategies.context.ts
import { createContext as createContext5, useContext as useContext5 } from "react";
var StrategiesContext = createContext5({
  current: void 0,
  isActive: (_name) => false,
  preferred: void 0
});
function useStrategy(name) {
  const ctx = useContext5(StrategiesContext);
  if (!ctx) {
    throw new ClerkElementsRuntimeError(
      'useStrategy must be used within a <SignIn.Step name="verifications"> component. Did you mean to `import { Step } from "@clerk/elements/sign-up"` instead?'
    );
  }
  const { current, preferred, isActive } = ctx;
  return {
    current,
    preferred,
    get active() {
      return isActive(name);
    }
  };
}

// src/react/common/form/input.tsx
import { jsx as jsx6 } from "react/jsx-runtime";
var DISPLAY_NAME6 = "ClerkElementsInput";
var DISPLAY_NAME_PASSKEYS_AUTOFILL = "ClerkElementsInputWithPasskeyAutofill";
var Input = React13.forwardRef(
  (props, forwardedRef) => {
    var _a, _b, _c;
    const clerk = useClerk2();
    const field = useInput(props);
    const hasPasskeyAutofillProp = Boolean((_a = field.props.autoComplete) == null ? void 0 : _a.includes("webauthn"));
    const allowedTypeForPasskey = ["text", "email", "tel"].includes(field.props.type);
    const signInRouterRef = SignInRouterCtx.useActorRef(true);
    (_c = clerk.telemetry) == null ? void 0 : _c.record(
      eventComponentMounted("Elements_Input", {
        type: (_b = props.type) != null ? _b : false,
        // @ts-expect-error - Depending on type the props can be different
        render: Boolean(props == null ? void 0 : props.render),
        // @ts-expect-error - Depending on type the props can be different
        asChild: Boolean(props == null ? void 0 : props.asChild),
        // @ts-expect-error - Depending on type the props can be different
        validatePassword: Boolean(props == null ? void 0 : props.validatePassword)
      })
    );
    if (signInRouterRef && hasPasskeyAutofillProp && allowedTypeForPasskey) {
      return /* @__PURE__ */ jsx6(
        InputWithPasskeyAutofill,
        {
          ref: forwardedRef,
          ...props
        }
      );
    }
    if (hasPasskeyAutofillProp && !allowedTypeForPasskey) {
      logger.warnOnce(
        `<Input autoComplete="webauthn"> can only be used with <Input type="text"> or <Input type="email">`
      );
    } else if (hasPasskeyAutofillProp) {
      logger.warnOnce(
        `<Input autoComplete="webauthn"> can only be used inside <SignIn> in order to trigger a sign-in attempt, otherwise it will be ignored.`
      );
    }
    return /* @__PURE__ */ jsx6(
      field.Element,
      {
        ref: forwardedRef,
        ...field.props
      }
    );
  }
);
Input.displayName = DISPLAY_NAME6;
var InputWithPasskeyAutofill = React13.forwardRef(
  (props, forwardedRef) => {
    const signInRouterRef = SignInRouterCtx.useActorRef(true);
    const passkeyAutofillSupported = useSignInPasskeyAutofill();
    React13.useEffect(() => {
      if (passkeyAutofillSupported) {
        signInRouterRef == null ? void 0 : signInRouterRef.send({ type: "AUTHENTICATE.PASSKEY.AUTOFILL" });
      }
    }, [passkeyAutofillSupported, signInRouterRef]);
    const field = useInput(props);
    return /* @__PURE__ */ jsx6(
      field.Element,
      {
        ref: forwardedRef,
        ...field.props
      }
    );
  }
);
InputWithPasskeyAutofill.displayName = DISPLAY_NAME_PASSKEYS_AUTOFILL;

// src/react/common/form/label.tsx
import { Label as RadixLabel } from "@radix-ui/react-form";
var DISPLAY_NAME7 = "ClerkElementsLabel";
var Label = RadixLabel;
Label.displayName = DISPLAY_NAME7;

// src/react/common/form/submit.tsx
import { Submit as RadixSubmit } from "@radix-ui/react-form";
var DISPLAY_NAME8 = "ClerkElementsSubmit";
var Submit = RadixSubmit;
Submit.displayName = DISPLAY_NAME8;

// src/react/common/connections.tsx
import { Slot as Slot3 } from "@radix-ui/react-slot";
import { createContext as createContext6, useContext as useContext6 } from "react";

// src/react/hooks/use-active-tags.hook.ts
import { useSelector } from "@xstate/react";
var ActiveTagsMode = {
  any: "any",
  all: "all"
};
function useActiveTags(actor, tags, mode = ActiveTagsMode.any) {
  const state = useSelector(
    actor,
    (s) => s,
    (prev, next) => prev.tags === next.tags
  );
  if (!state) {
    return false;
  }
  if (typeof tags === "string") {
    return state.hasTag(tags);
  }
  if (!Array.isArray(tags)) {
    throw new Error("Invalid tags parameter provided to useActiveTags");
  }
  switch (mode) {
    case ActiveTagsMode.any: {
      const matching = new Set(tags.filter((tag) => state.hasTag(tag)));
      return { active: matching.size > 0, activeTags: matching };
    }
    case ActiveTagsMode.all:
      return tags.length === state.tags.size ? tags.every((tag) => state.hasTag(tag)) : false;
    default:
      return false;
  }
}

// src/react/hooks/use-third-party-provider.hook.ts
import { useClerk as useClerk3 } from "@clerk/shared/react";
import { useCallback as useCallback4 } from "react";

// src/utils/third-party-strategies.ts
import { OAUTH_PROVIDERS, WEB3_PROVIDERS } from "@clerk/types";

// src/utils/clerk-js.ts
var fromEntries = (iterable) => {
  return [...iterable].reduce((obj, [key, val]) => {
    obj[key] = val;
    return obj;
  }, {});
};
function iconImageUrl(id) {
  return `https://img.clerk.com/static/${id}.svg`;
}

// src/utils/third-party-strategies.ts
var oauthStrategies = OAUTH_PROVIDERS.map((p) => p.strategy);
var providerToDisplayData = fromEntries(
  [...OAUTH_PROVIDERS, ...WEB3_PROVIDERS].map((p) => {
    return [p.provider, { iconUrl: iconImageUrl(p.provider), name: p.name, strategy: p.strategy }];
  })
);
var strategyToDisplayData = fromEntries(
  [...OAUTH_PROVIDERS, ...WEB3_PROVIDERS].map((p) => {
    return [p.strategy, { iconUrl: iconImageUrl(p.provider), id: p.provider, name: p.name }];
  })
);
function isSamlStrategy(strategy) {
  return strategy === "saml";
}
function isWeb3Strategy(strategy, available) {
  return available.includes(strategy.startsWith("web3_") ? strategy : `web3_${strategy}_signature`);
}
function isAuthenticatableOauthStrategy(strategy, available) {
  return available.includes(strategy.startsWith("oauth_") ? strategy : `oauth_${strategy}`);
}
var emptyThirdPartyProviders = {
  authenticatableOauthStrategies: [],
  providerToDisplayData: {},
  strategies: [],
  strategyToDisplayData: {},
  web3Strategies: []
};
var getEnabledThirdPartyProviders = (environment) => {
  if (!(environment == null ? void 0 : environment.userSettings)) {
    return emptyThirdPartyProviders;
  }
  const { socialProviderStrategies, web3FirstFactors, authenticatableSocialStrategies } = environment.userSettings;
  const knownSocialProviderStrategies = socialProviderStrategies.filter((s) => oauthStrategies.includes(s));
  const knownAuthenticatableSocialStrategies = authenticatableSocialStrategies.filter((s) => oauthStrategies.includes(s));
  return {
    authenticatableOauthStrategies: [...knownAuthenticatableSocialStrategies],
    providerToDisplayData,
    strategies: [...knownSocialProviderStrategies, ...web3FirstFactors],
    strategyToDisplayData,
    web3Strategies: web3FirstFactors
  };
};

// src/react/hooks/use-third-party-provider.hook.ts
var useIsProviderEnabled = (provider) => {
  var _a, _b;
  const clerk = useClerk3();
  if (!clerk.loaded) {
    return null;
  }
  if (provider === "saml") {
    return (_b = (_a = clerk.__unstable__environment) == null ? void 0 : _a.userSettings.saml.enabled) != null ? _b : false;
  }
  const data = getEnabledThirdPartyProviders(clerk.__unstable__environment);
  return isAuthenticatableOauthStrategy(provider, data.authenticatableOauthStrategies) || isWeb3Strategy(provider, data.web3Strategies);
};
var useThirdPartyProvider = (ref, provider) => {
  const isProviderEnabled = useIsProviderEnabled(provider);
  const isSaml = isSamlStrategy(provider);
  const details = isSaml ? {
    name: "SAML",
    strategy: "saml"
  } : providerToDisplayData[provider];
  const authenticate = useCallback4(
    (event) => {
      if (!isProviderEnabled) {
        return;
      }
      event.preventDefault();
      if (isSaml) {
        return ref.send({ type: "AUTHENTICATE.SAML" });
      }
      if (provider === "metamask") {
        return ref.send({ type: "AUTHENTICATE.WEB3", strategy: "web3_metamask_signature" });
      }
      if (provider === "coinbase_wallet") {
        return ref.send({ type: "AUTHENTICATE.WEB3", strategy: "web3_coinbase_wallet_signature" });
      }
      return ref.send({ type: "AUTHENTICATE.OAUTH", strategy: `oauth_${provider}` });
    },
    [provider, isProviderEnabled, isSaml, ref]
  );
  if (isProviderEnabled === false) {
    const dashboardPath = `https://dashboard.clerk.com/last-active?path=/user-authentication/${provider === "metamask" ? "web3" : "social-connections"}`;
    throw new ClerkElementsRuntimeError(
      `You have used <Connection name="${provider}"> which isn't enabled for your project. Enable ${details.name} in your Clerk dashboard: ${dashboardPath}`
    );
  }
  return {
    events: {
      authenticate
    },
    ...details
  };
};

// src/react/sign-up/context/router.context.ts
var SignUpRouterCtx = createContextFromActorRef("SignUpRouterCtx");
function useSignUpStep(name) {
  return SignUpRouterCtx.useSelector((state) => state.children[name]);
}
var useSignUpStartStep = () => useSignUpStep("start");
var useSignUpContinueStep = () => useSignUpStep("continue");
var useSignUpVerificationStep = () => useSignUpStep("verification");

// src/react/common/connections.tsx
import { jsx as jsx7 } from "react/jsx-runtime";
var ConnectionContext = createContext6(null);
var useConnectionContext = () => {
  const ctx = useContext6(ConnectionContext);
  if (!ctx) {
    throw new Error("useConnectionContext must be used within <Clerk.Connection>");
  }
  return ctx;
};
function Connection({ asChild, name, ...rest }) {
  const signInRef = SignInRouterCtx.useActorRef(true);
  const signUpRef = SignUpRouterCtx.useActorRef(true);
  const provider = useThirdPartyProvider(signInRef || signUpRef, name);
  if (!provider) {
    return null;
  }
  const Comp = asChild ? Slot3 : "button";
  const defaultProps = asChild ? {} : { type: "button" };
  return /* @__PURE__ */ jsx7(ConnectionContext.Provider, { value: provider, children: /* @__PURE__ */ jsx7(
    Comp,
    {
      onClick: provider.events.authenticate,
      ...defaultProps,
      ...rest
    }
  ) });
}
function Icon({ asChild, ...rest }) {
  const { iconUrl, name } = useConnectionContext();
  const Comp = asChild ? Slot3 : "img";
  return /* @__PURE__ */ jsx7(
    Comp,
    {
      alt: `${name} logo`,
      src: iconUrl,
      ...rest
    }
  );
}

// src/react/common/loading.tsx
import { useClerk as useClerk6 } from "@clerk/shared/react";
import { eventComponentMounted as eventComponentMounted4 } from "@clerk/shared/telemetry";
import { useSelector as useSelector5 } from "@xstate/react";

// src/react/hooks/use-loading.hook.ts
import { useSelector as useSelector2 } from "@xstate/react";
var selectLoading = (snapshot) => {
  var _a;
  return (_a = snapshot == null ? void 0 : snapshot.context) == null ? void 0 : _a.loading;
};
var compareLoadingValue = (prev, next) => (prev == null ? void 0 : prev.isLoading) === (next == null ? void 0 : next.isLoading);
function useLoading(actor) {
  const loadingCtx = useSelector2(actor, selectLoading, compareLoadingValue);
  if (!loadingCtx) {
    return [false, { step: void 0, strategy: void 0, action: void 0 }];
  }
  return [loadingCtx.isLoading, { step: loadingCtx.step, strategy: loadingCtx.strategy, action: loadingCtx.action }];
}

// src/react/sign-in/step.tsx
import { useClerk as useClerk4 } from "@clerk/shared/react";
import { eventComponentMounted as eventComponentMounted2 } from "@clerk/shared/telemetry";

// src/react/sign-in/choose-session/choose-session.tsx
import { Slot as Slot4 } from "@radix-ui/react-slot";
import * as React17 from "react";

// src/react/utils/create-context-for-dom-validation.ts
import * as React14 from "react";
function createContextForDomValidation(displayName) {
  const ReactContext = React14.createContext(false);
  const OriginalProvider = ReactContext.Provider;
  function Provider({ children }) {
    return React14.createElement(
      OriginalProvider,
      {
        value: true
      },
      children
    );
  }
  Provider.displayName = displayName;
  function useContext9(allowMissingContext = false) {
    const context = React14.useContext(ReactContext);
    if (!allowMissingContext && !context) {
      throw new Error(
        `You used a hook from "${Provider.displayName}" but it's not inside a <${Provider.displayName}.Provider> component.`
      );
    }
    return context;
  }
  return {
    Provider,
    useDomValidation: useContext9
  };
}

// src/react/utils/is-valid-component-type.ts
import * as React15 from "react";
function isValidComponentType(child, type) {
  return React15.isValidElement(child) && child.type === type;
}

// src/react/sign-in/choose-session/choose-session.hooks.ts
import * as React16 from "react";
var SignInActiveSessionContext = React16.createContext(null);
function useSignInActiveSessionContext() {
  const ctx = React16.useContext(SignInActiveSessionContext);
  if (!ctx) {
    throw new Error("SignInActiveSessionContext must be used within a SessionList/SignInSessionListItem");
  }
  return ctx;
}
function useSignInChooseSessionIsActive() {
  const routerRef = SignInRouterCtx.useActorRef();
  return useActiveTags(routerRef, "step:choose-session");
}
function useSignInActiveSessionList(params) {
  const { omitCurrent = true } = params || {};
  return SignInRouterCtx.useSelector((state) => {
    var _a, _b, _c, _d;
    const activeSessions = ((_b = (_a = state.context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.activeSessions) || [];
    const currentSessionId = (_d = (_c = state.context.clerk) == null ? void 0 : _c.session) == null ? void 0 : _d.id;
    const filteredSessions = omitCurrent ? activeSessions.filter((s) => s.id !== currentSessionId) : activeSessions;
    return filteredSessions.map((s) => ({
      id: s.id,
      ...s.publicUserData
    }));
  });
}

// src/react/sign-in/choose-session/choose-session.tsx
import { jsx as jsx8 } from "react/jsx-runtime";
var SignInChooseSessionCtx = createContextForDomValidation("SignInChooseSessionCtx");
function SignInChooseSession({ asChild, children, ...props }) {
  const activeState = useSignInChooseSessionIsActive();
  const Comp = asChild ? Slot4 : "div";
  return activeState ? /* @__PURE__ */ jsx8(SignInChooseSessionCtx.Provider, { children: /* @__PURE__ */ jsx8(Comp, { ...props, children }) }) : null;
}
function SignInSessionList({ asChild, children, includeCurrentSession, ...props }) {
  const sessions = useSignInActiveSessionList({ omitCurrent: !includeCurrentSession });
  if (!children || !(sessions == null ? void 0 : sessions.length)) {
    return null;
  }
  if (React17.Children.count(children) > 1) {
    return React17.Children.only(null);
  }
  if (asChild && isValidComponentType(children, SignInSessionListItem)) {
    throw new Error("asChild cannot be used with SessionListItem as the direct child");
  }
  if (!React17.isValidElement(children)) {
    throw new Error("children must be a valid React element");
  }
  const newChildren = asChild ? children.props.children : children;
  const childrenWithCtx = sessions.map((session) => {
    return /* @__PURE__ */ jsx8(
      SignInActiveSessionContext.Provider,
      {
        value: session,
        children: newChildren
      },
      `SignInActiveSessionContext-${session.id}`
    );
  });
  if (asChild) {
    return /* @__PURE__ */ jsx8(Slot4, { ...props, children: React17.cloneElement(children, void 0, childrenWithCtx) });
  }
  return /* @__PURE__ */ jsx8("ul", { ...props, children: childrenWithCtx });
}
function SignInSessionListItem(props) {
  const { asChild = false, children, ...passthroughProps } = props;
  const session = useSignInActiveSessionContext();
  const Comp = asChild ? Slot4 : "li";
  return /* @__PURE__ */ jsx8(Comp, { ...passthroughProps, children: children({ session }) });
}

// src/react/sign-in/choose-strategy.tsx
import { Slot as Slot5 } from "@radix-ui/react-slot";
import { useSelector as useSelector3 } from "@xstate/react";
import * as React18 from "react";

// src/internals/machines/sign-in/verification.machine.ts
import { isClerkAPIResponseError as isClerkAPIResponseError2 } from "@clerk/shared/error";
import { assign as assign2, fromPromise, log, not, sendTo, setup as setup2 } from "xstate";

// src/internals/constants/index.ts
var SSO_CALLBACK_PATH_ROUTE = "/sso-callback";
var CHOOSE_SESSION_PATH_ROUTE = "/choose";
var MAGIC_LINK_VERIFY_PATH_ROUTE = "/verify";
var SIGN_IN_DEFAULT_BASE_PATH = safeAccess(
  () => {
    var _a;
    return (_a = process.env.CLERK_SIGN_IN_URL) != null ? _a : process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL;
  },
  "/sign-in"
);
var SIGN_UP_DEFAULT_BASE_PATH = safeAccess(
  () => {
    var _a;
    return (_a = process.env.CLERK_SIGN_UP_URL) != null ? _a : process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL;
  },
  "/sign-up"
);
var NEXT_WINDOW_HISTORY_SUPPORT_VERSION = "14.1.0";
var SEARCH_PARAMS = {
  createdSession: "__clerk_created_session",
  handshake: "__clerk_handshake",
  help: "__clerk_help",
  invitationToken: "__clerk_invitation_token",
  modalState: "__clerk_modal_state",
  satelliteUrl: "__clerk_satellite_url",
  status: "__clerk_status",
  synced: "__clerk_synced",
  ticket: "__clerk_ticket",
  transfer: "__clerk_transfer"
};
var RESENDABLE_COUNTDOWN_DEFAULT = 60;
var CAPTCHA_ELEMENT_ID = "clerk-captcha";
var ERROR_CODES = {
  FORM_IDENTIFIER_NOT_FOUND: "form_identifier_not_found",
  FORM_PASSWORD_INCORRECT: "form_password_incorrect",
  INVALID_STRATEGY_FOR_USER: "strategy_for_user_invalid",
  NOT_ALLOWED_TO_SIGN_UP: "not_allowed_to_sign_up",
  OAUTH_ACCESS_DENIED: "oauth_access_denied",
  OAUTH_EMAIL_DOMAIN_RESERVED_BY_SAML: "oauth_email_domain_reserved_by_saml",
  NOT_ALLOWED_ACCESS: "not_allowed_access",
  SAML_USER_ATTRIBUTE_MISSING: "saml_user_attribute_missing",
  USER_LOCKED: "user_locked"
};
var ROUTING = {
  path: "path",
  virtual: "virtual"
};

// src/internals/machines/shared/shared.actions.ts
function sendToLoading({ context, event }) {
  let step;
  let strategy;
  let action;
  if (event.type.startsWith("xstate.done.") || event.type.startsWith("xstate.error.")) {
    return context.parent.send({
      type: "LOADING",
      isLoading: false,
      step: void 0,
      strategy: void 0
    });
  }
  if (context.loadingStep === "strategy") {
    step = void 0;
    if (event.type === "REDIRECT") {
      strategy = event.params.strategy;
    }
    return context.parent.send({
      type: "LOADING",
      isLoading: true,
      step,
      strategy
    });
  } else if (context.loadingStep === "continue") {
    step = "continue";
    strategy = void 0;
    action = "action" in event ? event.action : void 0;
    return context.parent.send({
      type: "LOADING",
      isLoading: true,
      step,
      strategy,
      action
    });
  } else if (context.loadingStep === "reset-password") {
    step = "reset-password";
    strategy = void 0;
    action = "action" in event ? event.action : void 0;
    return context.parent.send({
      type: "LOADING",
      isLoading: true,
      step,
      strategy,
      action
    });
  } else if (context.loadingStep === "start") {
    step = "start";
    strategy = void 0;
    action = "action" in event ? event.action : void 0;
    return context.parent.send({
      type: "LOADING",
      isLoading: true,
      step,
      strategy,
      action
    });
  } else {
    step = context.loadingStep;
    strategy = void 0;
    action = "action" in event ? event.action : void 0;
    return context.parent.send({
      type: "LOADING",
      isLoading: true,
      step,
      strategy,
      action
    });
  }
}

// src/internals/machines/sign-in/utils/starting-factors.ts
import { isWebAuthnSupported } from "@clerk/shared/webauthn";
var makeSortingOrderMap = (arr) => arr.reduce(
  (acc, k, i) => {
    acc[k] = i;
    return acc;
  },
  {}
);
var STRATEGY_SORT_ORDER_PASSWORD_PREF = makeSortingOrderMap([
  "passkey",
  "password",
  "email_link",
  "email_code",
  "phone_code"
]);
var STRATEGY_SORT_ORDER_OTP_PREF = makeSortingOrderMap([
  "email_code",
  "email_link",
  "phone_code",
  "passkey",
  "password"
]);
var makeSortingFunction = (sortingMap) => (a, b) => {
  const orderA = sortingMap[a.strategy];
  const orderB = sortingMap[b.strategy];
  if (orderA === void 0 || orderB === void 0) {
    return 0;
  }
  return orderA - orderB;
};
var passwordPrefFactorComparator = makeSortingFunction(STRATEGY_SORT_ORDER_PASSWORD_PREF);
var otpPrefFactorComparator = makeSortingFunction(STRATEGY_SORT_ORDER_OTP_PREF);
var findFactorForIdentifier = (i) => (f) => {
  return "safeIdentifier" in f && f.safeIdentifier === i;
};
function determineStartingSignInFactor(firstFactors, identifier, preferredSignInStrategy) {
  if (!firstFactors || firstFactors.length === 0) {
    return null;
  }
  return preferredSignInStrategy === "password" ? determineStrategyWhenPasswordIsPreferred(firstFactors, identifier) : determineStrategyWhenOTPIsPreferred(firstFactors, identifier);
}
function findPasskeyStrategy(factors) {
  if (isWebAuthnSupported()) {
    const passkeyFactor = factors.find(({ strategy }) => strategy === "passkey");
    if (passkeyFactor) {
      return passkeyFactor;
    }
  }
  return null;
}
function determineStrategyWhenPasswordIsPreferred(factors, identifier) {
  const passkeyFactor = findPasskeyStrategy(factors);
  if (passkeyFactor) {
    return passkeyFactor;
  }
  const selected = factors.sort(passwordPrefFactorComparator)[0];
  if (selected.strategy === "password") {
    return selected;
  }
  return factors.find(findFactorForIdentifier(identifier)) || selected || null;
}
function determineStrategyWhenOTPIsPreferred(factors, identifier) {
  const passkeyFactor = findPasskeyStrategy(factors);
  if (passkeyFactor) {
    return passkeyFactor;
  }
  const sortedBasedOnPrefFactor = factors.sort(otpPrefFactorComparator);
  const forIdentifier = sortedBasedOnPrefFactor.find(findFactorForIdentifier(identifier));
  if (forIdentifier) {
    return forIdentifier;
  }
  const firstBasedOnPref = sortedBasedOnPrefFactor[0];
  if (firstBasedOnPref.strategy === "email_link") {
    return firstBasedOnPref;
  }
  return factors.find(findFactorForIdentifier(identifier)) || firstBasedOnPref || null;
}
function determineStartingSignInSecondFactor(secondFactors) {
  if (!secondFactors || secondFactors.length === 0) {
    return null;
  }
  const totpFactor = secondFactors.find((f) => f.strategy === "totp");
  if (totpFactor) {
    return totpFactor;
  }
  const phoneCodeFactor = secondFactors.find((f) => f.strategy === "phone_code");
  if (phoneCodeFactor) {
    return phoneCodeFactor;
  }
  return secondFactors[0];
}

// src/internals/machines/utils/assert.ts
function assertIsDefined(value, label) {
  if (value === void 0 || value === null) {
    throw new Error(`${label || value} is not defined`);
  }
}
function assertActorEventError(event) {
  if ("error" in event === false) {
    throw new Error(`Expected an error event, got "${event.type}"`);
  }
}

// src/internals/machines/sign-in/verification.types.ts
var SignInVerificationDelays = {
  resendableTimeout: 1e3
  // 1 second
};

// src/internals/machines/sign-in/verification.machine.ts
var isNonPreparableStrategy = (strategy) => {
  if (!strategy) {
    return false;
  }
  return ["passkey", "password"].includes(strategy);
};
var SignInVerificationMachineId = "SignInVerification";
var SignInVerificationMachine = setup2({
  actors: {
    determineStartingFactor: fromPromise(
      () => Promise.reject(new ClerkElementsRuntimeError("Actor `determineStartingFactor` must be overridden"))
    ),
    prepare: fromPromise(
      () => Promise.reject(new ClerkElementsRuntimeError("Actor `prepare` must be overridden"))
    ),
    attempt: fromPromise(
      () => Promise.reject(new ClerkElementsRuntimeError("Actor `attempt` must be overridden"))
    ),
    attemptPasskey: fromPromise(({ input: { parent, flow } }) => {
      return parent.getSnapshot().context.clerk.client.signIn.authenticateWithPasskey({
        flow
      });
    })
  },
  actions: {
    resendableTick: assign2(({ context }) => ({
      resendable: context.resendableAfter === 0,
      resendableAfter: context.resendableAfter > 0 ? context.resendableAfter - 1 : context.resendableAfter
    })),
    resendableReset: assign2({
      resendable: false,
      resendableAfter: RESENDABLE_COUNTDOWN_DEFAULT
    }),
    validateRegisteredStrategies: ({ context }) => {
      var _a;
      const clerk = context.parent.getSnapshot().context.clerk;
      if ((_a = clerk.__unstable__environment) == null ? void 0 : _a.isProduction()) {
        return;
      }
      if (false) {
        if (clerk.client.signIn.supportedFirstFactors && !clerk.client.signIn.supportedFirstFactors.every((factor) => context.registeredStrategies.has(factor.strategy))) {
          console.warn(
            `Clerk: Your instance is configured to support these strategies: ${clerk.client.signIn.supportedFirstFactors.map((factor) => factor.strategy).join(", ")}, but the rendered strategies are: ${Array.from(context.registeredStrategies).join(
              ", "
            )}. Make sure to render a <Strategy> component for each supported strategy. More information: https://clerk.com/docs/elements/reference/sign-in#strategy`
          );
        }
        if (clerk.client.signIn.supportedSecondFactors && !clerk.client.signIn.supportedSecondFactors.every((factor) => context.registeredStrategies.has(factor.strategy))) {
          console.warn(
            `Clerk: Your instance is configured to support these 2FA strategies: ${clerk.client.signIn.supportedSecondFactors.map((f) => f.strategy).join(", ")}, but the rendered strategies are: ${Array.from(context.registeredStrategies).join(
              ", "
            )}. Make sure to render a <Strategy> component for each supported strategy. More information: https://clerk.com/docs/elements/reference/sign-in#strategy`
          );
        }
        const strategiesUsedButNotActivated = Array.from(context.registeredStrategies).filter(
          (strategy) => !((_a2 = clerk.client.signIn.supportedFirstFactors) == null ? void 0 : _a2.some((supported) => supported.strategy === strategy))
        );
        if (strategiesUsedButNotActivated.length > 0) {
          console.warn(
            `Clerk: These rendered strategies are not configured for your instance: ${strategiesUsedButNotActivated.join(", ")}. If this is unexpected, make sure to enable them in your Clerk dashboard: https://dashboard.clerk.com/last-active?path=/user-authentication/email-phone-username`
          );
        }
        if (((_b = context.currentFactor) == null ? void 0 : _b.strategy) && !context.registeredStrategies.has((_c = context.currentFactor) == null ? void 0 : _c.strategy)) {
          throw new ClerkElementsRuntimeError(
            `Your sign-in attempt is missing a ${(_d = context.currentFactor) == null ? void 0 : _d.strategy} strategy. Make sure <Strategy name="${(_e = context.currentFactor) == null ? void 0 : _e.strategy}"> is rendered in your flow. More information: https://clerk.com/docs/elements/reference/sign-in#strategy`
          );
        } else if (!((_f = context.currentFactor) == null ? void 0 : _f.strategy)) {
          throw new ClerkElementsRuntimeError(
            "Unable to determine an authentication strategy to verify. This means your instance is misconfigured. Visit the Clerk Dashboard and verify that your instance has authentication strategies enabled: https://dashboard.clerk.com/last-active?path=/user-authentication/email-phone-username"
          );
        }
      }
    },
    sendToNext: ({ context, event }) => context.parent.send({ type: "NEXT", resource: event.output }),
    sendToLoading,
    setFormErrors: sendTo(
      ({ context }) => context.formRef,
      ({ event }) => {
        assertActorEventError(event);
        return {
          type: "ERRORS.SET",
          error: event.error
        };
      }
    ),
    setConsoleError: ({ event }) => {
      if (true) {
        return;
      }
      assertActorEventError(event);
      const error = isClerkAPIResponseError2(event.error) ? event.error.errors[0].longMessage : event.error.message;
      console.error(`Unable to fulfill the prepare or attempt request for the sign-in verification.
      Error: ${error}
      Please open an issue if you continue to run into this issue.`);
    }
  },
  guards: {
    isResendable: ({ context }) => context.resendable || context.resendableAfter === 0,
    isNeverResendable: ({ context }) => {
      var _a;
      return isNonPreparableStrategy((_a = context.currentFactor) == null ? void 0 : _a.strategy);
    }
  },
  delays: SignInVerificationDelays,
  types: {}
}).createMachine({
  id: SignInVerificationMachineId,
  context: ({ input }) => ({
    currentFactor: null,
    basePath: input.basePath || SIGN_IN_DEFAULT_BASE_PATH,
    formRef: input.formRef,
    loadingStep: "verifications",
    parent: input.parent,
    registeredStrategies: /* @__PURE__ */ new Set(),
    resendable: false,
    resendableAfter: RESENDABLE_COUNTDOWN_DEFAULT
  }),
  initial: "Init",
  on: {
    "NAVIGATE.PREVIOUS": ".Hist",
    "STRATEGY.REGISTER": {
      actions: assign2({
        registeredStrategies: ({ context, event }) => context.registeredStrategies.add(event.factor)
      })
    },
    "STRATEGY.UNREGISTER": {
      actions: assign2({
        registeredStrategies: ({ context, event }) => {
          context.registeredStrategies.delete(event.factor);
          return context.registeredStrategies;
        }
      })
    }
  },
  states: {
    Init: {
      tags: ["state:preparing", "state:loading"],
      invoke: {
        id: "determineStartingFactor",
        src: "determineStartingFactor",
        input: ({ context }) => ({
          parent: context.parent
        }),
        onDone: {
          target: "Preparing",
          actions: assign2({
            currentFactor: ({ event }) => event.output
          })
        },
        onError: {
          target: "Preparing",
          actions: [
            log("Clerk [Sign In Verification]: Error determining starting factor"),
            assign2({
              currentFactor: { strategy: "password" }
            })
          ]
        }
      }
    },
    Preparing: {
      tags: ["state:preparing", "state:loading"],
      invoke: {
        id: "prepare",
        src: "prepare",
        input: ({ context }) => ({
          parent: context.parent,
          resendable: context.resendable,
          params: {
            ...context.currentFactor,
            redirectUrl: `${window.location.origin}${context.basePath}${MAGIC_LINK_VERIFY_PATH_ROUTE}`
          }
        }),
        onDone: {
          actions: "resendableReset",
          target: "Pending"
        },
        onError: {
          actions: ["setFormErrors", "setConsoleError"],
          target: "Pending"
        }
      }
    },
    Pending: {
      tags: ["state:pending"],
      description: "Waiting for user input",
      on: {
        "AUTHENTICATE.PASSKEY": {
          guard: not("isExampleMode"),
          target: "AttemptingPasskey",
          reenter: true
        },
        "NAVIGATE.CHOOSE_STRATEGY": "ChooseStrategy",
        "NAVIGATE.FORGOT_PASSWORD": "ChooseStrategy",
        RETRY: "Preparing",
        SUBMIT: {
          target: "Attempting",
          reenter: true
        }
      },
      initial: "Init",
      states: {
        Init: {
          description: "Marks appropriate factors as never resendable.",
          always: [
            {
              guard: "isNeverResendable",
              target: "NeverResendable"
            },
            {
              target: "NotResendable"
            }
          ]
        },
        Resendable: {
          description: "Waiting for user to retry"
        },
        NeverResendable: {
          description: "Handles never resendable",
          on: {
            RETRY: {
              actions: log("Never retriable")
            }
          }
        },
        NotResendable: {
          description: "Handle countdowns",
          on: {
            RETRY: {
              actions: log(({ context }) => `Not retriable; Try again in ${context.resendableAfter}s`)
            }
          },
          after: {
            resendableTimeout: [
              {
                description: "Set as retriable if countdown is 0",
                guard: "isResendable",
                actions: "resendableTick",
                target: "Resendable"
              },
              {
                description: "Continue countdown if not retriable",
                actions: "resendableTick",
                target: "NotResendable",
                reenter: true
              }
            ]
          }
        }
      },
      after: {
        3e3: {
          actions: "validateRegisteredStrategies"
        }
      }
    },
    ChooseStrategy: {
      description: "Handles both choose strategy and forgot password as the latter is similar in functionality",
      tags: ["state:choose-strategy", "state:forgot-password"],
      on: {
        "STRATEGY.UPDATE": {
          actions: assign2({ currentFactor: ({ event }) => event.factor || null }),
          target: "Preparing"
        }
      }
    },
    Attempting: {
      tags: ["state:attempting", "state:loading"],
      entry: "sendToLoading",
      invoke: {
        id: "attempt",
        src: "attempt",
        input: ({ context }) => ({
          parent: context.parent,
          currentFactor: context.currentFactor,
          fields: context.formRef.getSnapshot().context.fields
        }),
        onDone: {
          actions: ["sendToNext", "sendToLoading"]
        },
        onError: {
          actions: ["setFormErrors", "setConsoleError", "sendToLoading"],
          target: "Pending"
        }
      }
    },
    AttemptingPasskey: {
      tags: ["state:attempting", "state:loading"],
      entry: "sendToLoading",
      invoke: {
        id: "attemptPasskey",
        src: "attemptPasskey",
        input: ({ context }) => ({
          parent: context.parent,
          flow: "discoverable"
        }),
        onDone: {
          actions: ["sendToNext", "sendToLoading"]
        },
        onError: {
          actions: ["setFormErrors", "sendToLoading"],
          target: "Pending"
        }
      }
    },
    Hist: {
      type: "history"
    }
  }
});
var SignInFirstFactorMachine = SignInVerificationMachine.provide({
  actors: {
    determineStartingFactor: fromPromise(async ({ input }) => {
      var _a;
      const clerk = input.parent.getSnapshot().context.clerk;
      return Promise.resolve(
        determineStartingSignInFactor(
          clerk.client.signIn.supportedFirstFactors,
          clerk.client.signIn.identifier,
          (_a = clerk.__unstable__environment) == null ? void 0 : _a.displayConfig.preferredSignInStrategy
        )
      );
    }),
    prepare: fromPromise(async ({ input }) => {
      const { params, parent, resendable } = input;
      const clerk = parent.getSnapshot().context.clerk;
      const currentVerificationExpiration = clerk.client.signIn.firstFactorVerification.expireAt;
      const needsPrepare = resendable || !currentVerificationExpiration || currentVerificationExpiration < /* @__PURE__ */ new Date();
      if (isNonPreparableStrategy(params == null ? void 0 : params.strategy) || !needsPrepare) {
        return Promise.resolve(clerk.client.signIn);
      }
      assertIsDefined(params, "First factor params");
      return await clerk.client.signIn.prepareFirstFactor(params);
    }),
    attempt: fromPromise(async ({ input }) => {
      var _a, _b, _c, _d;
      const { currentFactor, fields, parent } = input;
      assertIsDefined(currentFactor, "Current factor");
      let attemptParams;
      const strategy = currentFactor.strategy;
      const code = (_a = fields.get("code")) == null ? void 0 : _a.value;
      const password = (_b = fields.get("password")) == null ? void 0 : _b.value;
      switch (strategy) {
        case "passkey": {
          return await parent.getSnapshot().context.clerk.client.signIn.authenticateWithPasskey();
        }
        case "password": {
          assertIsDefined(password, "Password");
          attemptParams = {
            strategy,
            password
          };
          break;
        }
        case "reset_password_phone_code":
        case "reset_password_email_code": {
          assertIsDefined(code, "Code for resetting phone/email");
          attemptParams = {
            strategy,
            code,
            password
          };
          break;
        }
        case "phone_code":
        case "email_code": {
          assertIsDefined(code, "Code for phone/email");
          attemptParams = {
            strategy,
            code
          };
          break;
        }
        case "web3_metamask_signature": {
          const signature = (_c = fields.get("signature")) == null ? void 0 : _c.value;
          assertIsDefined(signature, "Web3 Metamask signature");
          attemptParams = {
            strategy,
            signature
          };
          break;
        }
        case "web3_coinbase_wallet_signature": {
          const signature = (_d = fields.get("signature")) == null ? void 0 : _d.value;
          assertIsDefined(signature, "Web3 Coinbase Wallet signature");
          attemptParams = {
            strategy,
            signature
          };
          break;
        }
        default:
          throw new ClerkElementsRuntimeError(`Invalid strategy: ${strategy}`);
      }
      return await parent.getSnapshot().context.clerk.client.signIn.attemptFirstFactor(attemptParams);
    })
  }
});
var SignInSecondFactorMachine = SignInVerificationMachine.provide({
  actors: {
    determineStartingFactor: fromPromise(
      async ({ input }) => Promise.resolve(
        determineStartingSignInSecondFactor(
          input.parent.getSnapshot().context.clerk.client.signIn.supportedSecondFactors
        )
      )
    ),
    prepare: fromPromise(async ({ input }) => {
      const { params, parent, resendable } = input;
      const clerk = parent.getSnapshot().context.clerk;
      const currentVerificationExpiration = clerk.client.signIn.secondFactorVerification.expireAt;
      const needsPrepare = resendable || !currentVerificationExpiration || currentVerificationExpiration < /* @__PURE__ */ new Date();
      assertIsDefined(params, "Second factor params");
      if (params.strategy !== "phone_code" || !needsPrepare) {
        return Promise.resolve(clerk.client.signIn);
      }
      return await clerk.client.signIn.prepareSecondFactor({
        strategy: params.strategy,
        phoneNumberId: params.phoneNumberId
      });
    }),
    attempt: fromPromise(async ({ input }) => {
      var _a;
      const { fields, parent, currentFactor } = input;
      const code = (_a = fields.get("code")) == null ? void 0 : _a.value;
      assertIsDefined(currentFactor, "Current factor");
      assertIsDefined(code, "Code");
      return await parent.getSnapshot().context.clerk.client.signIn.attemptSecondFactor({
        strategy: currentFactor.strategy,
        code
      });
    })
  }
});

// src/internals/machines/sign-in/router.machine.ts
import { joinURL } from "@clerk/shared/url";
import { isWebAuthnAutofillSupported } from "@clerk/shared/webauthn";
import { and, assign as assign4, enqueueActions as enqueueActions2, fromPromise as fromPromise5, log as log3, not as not4, or, raise, sendTo as sendTo5, setup as setup6 } from "xstate";

// src/internals/machines/third-party/third-party.actors.ts
import { fromCallback, fromPromise as fromPromise2 } from "xstate";

// src/internals/machines/utils/clerkjs.ts
function isClerkJSEvent(eventObj, event) {
  return Object.values(eventObj).includes(event);
}
var ClerkJSNavigationEvent = {
  complete: "CLERKJS.NAVIGATE.COMPLETE",
  signUp: "CLERKJS.NAVIGATE.SIGN_UP",
  continue: "CLERKJS.NAVIGATE.CONTINUE",
  generic: "CLERKJS.NAVIGATE.GENERIC",
  resetPassword: "CLERKJS.NAVIGATE.RESET_PASSWORD",
  signIn: "CLERKJS.NAVIGATE.SIGN_IN",
  verification: "CLERKJS.NAVIGATE.VERIFICATION"
};
function isClerkJSNavigationEvent(event) {
  return isClerkJSEvent(ClerkJSNavigationEvent, event);
}

// src/internals/machines/third-party/third-party.actors.ts
var redirect = fromPromise2(
  async ({ input: { flow, params, parent } }) => {
    const clerk = parent.getSnapshot().context.clerk;
    return clerk.client[flow].authenticateWithRedirect({
      redirectUrl: clerk.buildUrlWithAuth(params.redirectUrl || "/"),
      redirectUrlComplete: clerk.buildUrlWithAuth(params.redirectUrlComplete || "/"),
      ...params
    });
  }
);
var handleRedirectCallback = fromCallback(
  ({ sendBack, input: parent }) => {
    var _a;
    const clerk = parent.getSnapshot().context.clerk;
    const displayConfig = (_a = clerk.__unstable__environment) == null ? void 0 : _a.displayConfig;
    const customNavigate = (toEvt) => {
      const to = toEvt.split("/").slice(-1)[0];
      if (isClerkJSNavigationEvent(to)) {
        sendBack({ type: to });
      } else if (to === (displayConfig == null ? void 0 : displayConfig.signInUrl)) {
        sendBack({ type: ClerkJSNavigationEvent.signIn });
      } else if (to === (displayConfig == null ? void 0 : displayConfig.signUpUrl)) {
        sendBack({ type: ClerkJSNavigationEvent.signUp });
      } else {
        sendBack({ type: "FAILURE", error: new ClerkElementsRuntimeError(`Unknown navigation event: ${to}`) });
      }
      return Promise.resolve();
    };
    const loadedClerk = clerk.clerkjs;
    void loadedClerk.handleRedirectCallback(
      {
        signInForceRedirectUrl: ClerkJSNavigationEvent.complete,
        signInFallbackRedirectUrl: ClerkJSNavigationEvent.complete,
        signUpForceRedirectUrl: ClerkJSNavigationEvent.signUp,
        signUpFallbackRedirectUrl: ClerkJSNavigationEvent.signUp,
        continueSignUpUrl: ClerkJSNavigationEvent.continue,
        firstFactorUrl: ClerkJSNavigationEvent.signIn,
        resetPasswordUrl: ClerkJSNavigationEvent.resetPassword,
        secondFactorUrl: ClerkJSNavigationEvent.signIn,
        verifyEmailAddressUrl: ClerkJSNavigationEvent.verification,
        verifyPhoneNumberUrl: ClerkJSNavigationEvent.verification,
        signUpUrl: ClerkJSNavigationEvent.signUp,
        signInUrl: ClerkJSNavigationEvent.signIn
      },
      customNavigate
    );
    return () => void 0;
  }
);

// src/internals/machines/third-party/third-party.machine.ts
import { assertEvent, assign as assign3, log as log2, not as not2, sendTo as sendTo2, setup as setup3 } from "xstate";
var ThirdPartyMachineId = "ThirdParty";
var ThirdPartyMachine = setup3({
  actors: {
    handleRedirectCallback,
    redirect
  },
  actions: {
    logError: log2(({ event }) => `Error: ${event.type}`),
    assignActiveStrategy: assign3({
      activeStrategy: ({ event }) => {
        assertEvent(event, "REDIRECT");
        return event.params.strategy;
      }
    }),
    unassignActiveStrategy: assign3({
      activeStrategy: null
    }),
    sendToNext: ({ context }) => context.parent.send({ type: "NEXT" }),
    sendToLoading,
    setFormErrors: sendTo2(
      ({ context }) => context.formRef,
      ({ event }) => {
        assertActorEventError(event);
        return {
          type: "ERRORS.SET",
          error: event.error
        };
      }
    )
  },
  guards: {
    isExampleMode: ({ context }) => Boolean(context.parent.getSnapshot().context.exampleMode)
  },
  types: {}
}).createMachine({
  id: ThirdPartyMachineId,
  context: ({ input }) => ({
    activeStrategy: null,
    basePath: input.basePath,
    formRef: input.formRef,
    flow: input.flow,
    parent: input.parent,
    loadingStep: "strategy"
  }),
  initial: "Idle",
  states: {
    Idle: {
      description: "Sets third-party providers if not already set, and waits for a redirect or callback event",
      on: {
        CALLBACK: "HandlingCallback",
        REDIRECT: {
          guard: not2("isExampleMode"),
          target: "Redirecting",
          reenter: true
        }
      }
    },
    Redirecting: {
      description: "Redirects to the third-party provider for authentication",
      tags: ["state:redirect", "state:loading"],
      entry: ["assignActiveStrategy", "sendToLoading"],
      exit: ["unassignActiveStrategy", "sendToLoading"],
      invoke: {
        id: "redirect",
        src: "redirect",
        input: ({ context, event }) => {
          assertEvent(event, "REDIRECT");
          return {
            basePath: context.basePath,
            flow: context.flow,
            params: event.params,
            parent: context.parent
          };
        },
        onError: {
          actions: "setFormErrors",
          target: "Idle"
        }
      }
    },
    HandlingCallback: {
      description: "Handles the callback from the third-party provider",
      tags: ["state:callback", "state:loading"],
      invoke: {
        id: "handleRedirectCallback",
        src: "handleRedirectCallback",
        input: ({ context }) => context.parent,
        onError: {
          actions: ["logError", "setFormErrors"],
          target: "Idle"
        }
      },
      on: {
        "CLERKJS.NAVIGATE.*": {
          actions: "sendToNext",
          target: "Idle"
        }
      }
    }
  }
});

// src/internals/machines/utils/next.ts
function shouldUseVirtualRouting() {
  if (typeof window === "undefined") {
    return false;
  }
  if (!window.next) {
    return false;
  }
  return window.next.version < NEXT_WINDOW_HISTORY_SUPPORT_VERSION;
}

// src/internals/machines/sign-in/reset-password.machine.ts
import { fromPromise as fromPromise3, sendTo as sendTo3, setup as setup4 } from "xstate";
var SignInResetPasswordMachineId = "SignInResetPasswordMachine";
var SignInResetPasswordMachine = setup4({
  actors: {
    attempt: fromPromise3(
      ({ input: { fields, parent } }) => {
        var _a, _b;
        const password = ((_a = fields.get("password")) == null ? void 0 : _a.value) || "";
        const signOutOfOtherSessions = ((_b = fields.get("signOutOfOtherSessions")) == null ? void 0 : _b.checked) || false;
        return parent.getSnapshot().context.clerk.client.signIn.resetPassword({ password, signOutOfOtherSessions });
      }
    )
  },
  actions: {
    sendToLoading,
    sendToNext: ({ context, event }) => context.parent.send({ type: "NEXT", resource: event.output }),
    setFormErrors: sendTo3(
      ({ context }) => context.formRef,
      ({ event }) => {
        assertActorEventError(event);
        return {
          type: "ERRORS.SET",
          error: event.error
        };
      }
    )
  },
  types: {}
}).createMachine({
  id: SignInResetPasswordMachineId,
  context: ({ input }) => ({
    loadingStep: "reset-password",
    parent: input.parent,
    formRef: input.formRef
  }),
  initial: "Pending",
  states: {
    Pending: {
      tags: ["state:pending"],
      description: "Waiting for user input",
      on: {
        SUBMIT: {
          target: "Attempting",
          reenter: true
        }
      }
    },
    Attempting: {
      tags: ["state:attempting", "state:loading"],
      entry: "sendToLoading",
      invoke: {
        id: "attempt",
        src: "attempt",
        input: ({ context }) => ({
          parent: context.parent,
          fields: context.formRef.getSnapshot().context.fields
        }),
        onDone: {
          actions: ["sendToNext", "sendToLoading"]
        },
        onError: {
          actions: ["setFormErrors", "sendToLoading"],
          target: "Pending"
        }
      }
    }
  }
});

// src/internals/machines/sign-in/start.machine.ts
import { assertEvent as assertEvent2, fromPromise as fromPromise4, not as not3, sendTo as sendTo4, setup as setup5 } from "xstate";
var SignInStartMachineId = "SignInStart";
var SignInStartMachine = setup5({
  actors: {
    attemptPasskey: fromPromise4(({ input: { parent, flow } }) => {
      return parent.getSnapshot().context.clerk.client.signIn.authenticateWithPasskey({
        flow
      });
    }),
    attemptWeb3: fromPromise4(
      ({ input: { parent, strategy } }) => {
        if (strategy === "web3_metamask_signature") {
          return parent.getSnapshot().context.clerk.client.signIn.authenticateWithMetamask();
        }
        if (strategy === "web3_coinbase_wallet_signature") {
          return parent.getSnapshot().context.clerk.client.signIn.authenticateWithCoinbaseWallet();
        }
        throw new ClerkElementsRuntimeError(`Unsupported Web3 strategy: ${strategy}`);
      }
    ),
    attempt: fromPromise4(
      ({ input: { fields, parent } }) => {
        const clerk = parent.getSnapshot().context.clerk;
        const password = fields.get("password");
        const identifier = fields.get("identifier");
        const passwordParams = (password == null ? void 0 : password.value) ? {
          password: password.value,
          strategy: "password"
        } : {};
        return clerk.client.signIn.create({
          identifier: (identifier == null ? void 0 : identifier.value) || "",
          ...passwordParams
        });
      }
    )
  },
  actions: {
    sendToNext: ({ context, event }) => {
      return context.parent.send({ type: "NEXT", resource: event == null ? void 0 : event.output });
    },
    sendToLoading,
    setFormErrors: sendTo4(
      ({ context }) => context.formRef,
      ({ event }) => {
        assertActorEventError(event);
        return {
          type: "ERRORS.SET",
          error: event.error
        };
      }
    )
  },
  guards: {
    isExampleMode: ({ context }) => Boolean(context.parent.getSnapshot().context.exampleMode)
  },
  types: {}
}).createMachine({
  id: SignInStartMachineId,
  context: ({ input }) => ({
    basePath: input.basePath || SIGN_IN_DEFAULT_BASE_PATH,
    parent: input.parent,
    formRef: input.formRef,
    loadingStep: "start"
  }),
  initial: "Pending",
  states: {
    Pending: {
      tags: ["state:pending"],
      description: "Waiting for user input",
      on: {
        SUBMIT: {
          guard: not3("isExampleMode"),
          target: "Attempting",
          reenter: true
        },
        "AUTHENTICATE.PASSKEY": {
          guard: not3("isExampleMode"),
          target: "AttemptingPasskey",
          reenter: true
        },
        "AUTHENTICATE.PASSKEY.AUTOFILL": {
          guard: not3("isExampleMode"),
          target: "AttemptingPasskeyAutoFill",
          reenter: false
        },
        "AUTHENTICATE.WEB3": {
          guard: not3("isExampleMode"),
          target: "AttemptingWeb3",
          reenter: true
        }
      }
    },
    Attempting: {
      tags: ["state:attempting", "state:loading"],
      entry: "sendToLoading",
      invoke: {
        id: "attempt",
        src: "attempt",
        input: ({ context }) => ({
          parent: context.parent,
          fields: context.formRef.getSnapshot().context.fields
        }),
        onDone: {
          actions: ["sendToNext", "sendToLoading"]
        },
        onError: {
          actions: ["setFormErrors", "sendToLoading"],
          target: "Pending"
        }
      }
    },
    AttemptingPasskey: {
      tags: ["state:attempting", "state:loading"],
      entry: "sendToLoading",
      invoke: {
        id: "attemptPasskey",
        src: "attemptPasskey",
        input: ({ context }) => ({
          parent: context.parent,
          flow: "discoverable"
        }),
        onDone: {
          actions: ["sendToNext", "sendToLoading"]
        },
        onError: {
          actions: ["setFormErrors", "sendToLoading"],
          target: "Pending"
        }
      }
    },
    AttemptingPasskeyAutoFill: {
      on: {
        "AUTHENTICATE.PASSKEY": {
          guard: not3("isExampleMode"),
          target: "AttemptingPasskey",
          reenter: true
        },
        SUBMIT: {
          guard: not3("isExampleMode"),
          target: "Attempting",
          reenter: true
        }
      },
      invoke: {
        id: "attemptPasskeyAutofill",
        src: "attemptPasskey",
        input: ({ context }) => ({
          parent: context.parent,
          flow: "autofill"
        }),
        onDone: {
          actions: ["sendToNext"]
        },
        onError: {
          actions: ["setFormErrors"],
          target: "Pending"
        }
      }
    },
    AttemptingWeb3: {
      tags: ["state:attempting", "state:loading"],
      entry: "sendToLoading",
      invoke: {
        id: "attemptWeb3",
        src: "attemptWeb3",
        input: ({ context, event }) => {
          assertEvent2(event, "AUTHENTICATE.WEB3");
          return {
            parent: context.parent,
            strategy: event.strategy
          };
        },
        onDone: {
          actions: ["sendToNext", "sendToLoading"]
        },
        onError: {
          actions: ["setFormErrors", "sendToLoading"],
          target: "Pending"
        }
      }
    }
  }
});

// src/internals/machines/sign-in/router.machine.ts
var isCurrentPath = (path) => ({ context }, _params) => {
  var _a, _b;
  return (_b = (_a = context.router) == null ? void 0 : _a.match(path)) != null ? _b : false;
};
var needsStatus = (status) => ({ context, event }, _) => {
  var _a, _b;
  return ((_a = event == null ? void 0 : event.resource) == null ? void 0 : _a.status) === status || ((_b = context.clerk) == null ? void 0 : _b.client.signIn.status) === status;
};
var SignInRouterMachineId = "SignInRouter";
var SignInRouterMachine = setup6({
  actors: {
    firstFactorMachine: SignInFirstFactorMachine,
    formMachine: FormMachine,
    resetPasswordMachine: SignInResetPasswordMachine,
    startMachine: SignInStartMachine,
    secondFactorMachine: SignInSecondFactorMachine,
    thirdPartyMachine: ThirdPartyMachine,
    webAuthnAutofillSupport: fromPromise5(() => isWebAuthnAutofillSupported())
  },
  actions: {
    clearFormErrors: sendTo5(({ context }) => context.formRef, { type: "ERRORS.CLEAR" }),
    navigateInternal: ({ context }, { path, force = false }) => {
      if (!context.router) {
        return;
      }
      if (!force && shouldUseVirtualRouting()) {
        return;
      }
      if (context.exampleMode) {
        return;
      }
      const resolvedPath = joinURL(context.router.basePath, path);
      if (resolvedPath === context.router.pathname()) {
        return;
      }
      context.router.shallowPush(resolvedPath);
    },
    navigateExternal: ({ context }, { path }) => {
      var _a;
      return (_a = context.router) == null ? void 0 : _a.push(path);
    },
    raiseNext: raise({ type: "NEXT" }),
    setActive: enqueueActions2(({ enqueue, check, context, event }) => {
      if (check("isExampleMode")) {
        return;
      }
      const id = event == null ? void 0 : event.id;
      const lastActiveSessionId = context.clerk.client.lastActiveSessionId;
      const createdSessionId = ((event == null ? void 0 : event.resource) || context.clerk.client.signIn).createdSessionId;
      const session = id || createdSessionId || lastActiveSessionId || null;
      const beforeEmit = () => {
        var _a, _b;
        return (_b = context.router) == null ? void 0 : _b.push(((_a = context.router) == null ? void 0 : _a.searchParams().get("redirect_url")) || context.clerk.buildAfterSignInUrl());
      };
      void context.clerk.setActive({ session, beforeEmit });
      enqueue.raise({ type: "RESET" }, { delay: 2e3 });
    }),
    setError: assign4({
      error: (_, { error }) => {
        if (error) {
          return error;
        }
        return new ClerkElementsRuntimeError("Unknown error");
      }
    }),
    setFormErrors: ({ context }, params) => sendTo5(context.formRef, {
      type: "ERRORS.SET",
      error: params.error
    }),
    setFormOAuthErrors: ({ context }) => {
      const errorOrig = context.clerk.client.signIn.firstFactorVerification.error;
      if (!errorOrig) {
        return;
      }
      let error;
      switch (errorOrig.code) {
        case ERROR_CODES.NOT_ALLOWED_TO_SIGN_UP:
        case ERROR_CODES.OAUTH_ACCESS_DENIED:
        case ERROR_CODES.NOT_ALLOWED_ACCESS:
        case ERROR_CODES.SAML_USER_ATTRIBUTE_MISSING:
        case ERROR_CODES.OAUTH_EMAIL_DOMAIN_RESERVED_BY_SAML:
        case ERROR_CODES.USER_LOCKED:
          error = new ClerkElementsError(errorOrig.code, errorOrig.longMessage || "");
          break;
        default:
          error = new ClerkElementsError(
            "unable_to_complete",
            "Unable to complete action at this time. If the problem persists please contact support."
          );
      }
      context.formRef.send({
        type: "ERRORS.SET",
        error
      });
    },
    transfer: ({ context }) => {
      var _a;
      const searchParams = new URLSearchParams({ __clerk_transfer: "1" });
      (_a = context.router) == null ? void 0 : _a.push(`${context.signUpPath}?${searchParams}`);
    }
  },
  guards: {
    hasAuthenticatedViaClerkJS: ({ context }) => Boolean(context.clerk.client.signIn.status === null && context.clerk.client.lastActiveSessionId),
    hasOAuthError: ({ context }) => {
      var _a, _b, _c, _d;
      return Boolean((_d = (_c = (_b = (_a = context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.signIn) == null ? void 0 : _c.firstFactorVerification) == null ? void 0 : _d.error);
    },
    hasResource: ({ context }) => {
      var _a, _b, _c;
      return Boolean((_c = (_b = (_a = context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.signIn) == null ? void 0 : _c.status);
    },
    isLoggedInAndSingleSession: and(["isLoggedIn", "isSingleSessionMode", not4("isExampleMode")]),
    isActivePathRoot: isCurrentPath("/"),
    isComplete: ({ context, event }) => {
      const resource = event == null ? void 0 : event.resource;
      const signIn = context.clerk.client.signIn;
      return (resource == null ? void 0 : resource.status) === "complete" && Boolean(resource == null ? void 0 : resource.createdSessionId) || signIn.status === "complete" && Boolean(signIn.createdSessionId);
    },
    isLoggedIn: ({ context }) => {
      var _a;
      return Boolean((_a = context.clerk) == null ? void 0 : _a.user);
    },
    isSingleSessionMode: ({ context }) => {
      var _a, _b;
      return Boolean((_b = (_a = context.clerk) == null ? void 0 : _a.__unstable__environment) == null ? void 0 : _b.authConfig.singleSessionMode);
    },
    isExampleMode: ({ context }) => Boolean(context.exampleMode),
    needsStart: or([not4("hasResource"), "statusNeedsIdentifier", isCurrentPath("/")]),
    needsFirstFactor: and(["statusNeedsFirstFactor", isCurrentPath("/continue")]),
    needsSecondFactor: and(["statusNeedsSecondFactor", isCurrentPath("/continue")]),
    needsCallback: isCurrentPath(SSO_CALLBACK_PATH_ROUTE),
    needsChooseSession: isCurrentPath(CHOOSE_SESSION_PATH_ROUTE),
    needsNewPassword: and(["statusNeedsNewPassword", isCurrentPath("/new-password")]),
    statusNeedsIdentifier: needsStatus("needs_identifier"),
    statusNeedsFirstFactor: needsStatus("needs_first_factor"),
    statusNeedsSecondFactor: needsStatus("needs_second_factor"),
    statusNeedsNewPassword: needsStatus("needs_new_password")
  },
  types: {}
}).createMachine({
  id: SignInRouterMachineId,
  // @ts-expect-error - Set in INIT event
  context: {},
  initial: "Idle",
  on: {
    "AUTHENTICATE.OAUTH": {
      actions: sendTo5(ThirdPartyMachineId, ({ context, event }) => {
        var _a, _b, _c, _d;
        return {
          type: "REDIRECT",
          params: {
            strategy: event.strategy,
            redirectUrl: `${((_a = context.router) == null ? void 0 : _a.mode) === ROUTING.virtual ? (_b = context.clerk.__unstable__environment) == null ? void 0 : _b.displayConfig.signInUrl : (_c = context.router) == null ? void 0 : _c.basePath}${SSO_CALLBACK_PATH_ROUTE}`,
            redirectUrlComplete: ((_d = context.router) == null ? void 0 : _d.searchParams().get("redirect_url")) || context.clerk.buildAfterSignInUrl()
          }
        };
      })
    },
    "AUTHENTICATE.SAML": {
      actions: sendTo5(ThirdPartyMachineId, ({ context }) => {
        var _a, _b, _c, _d, _e;
        return {
          type: "REDIRECT",
          params: {
            strategy: "saml",
            identifier: (_a = context.formRef.getSnapshot().context.fields.get("identifier")) == null ? void 0 : _a.value,
            redirectUrl: `${((_b = context.router) == null ? void 0 : _b.mode) === ROUTING.virtual ? (_c = context.clerk.__unstable__environment) == null ? void 0 : _c.displayConfig.signInUrl : (_d = context.router) == null ? void 0 : _d.basePath}${SSO_CALLBACK_PATH_ROUTE}`,
            redirectUrlComplete: ((_e = context.router) == null ? void 0 : _e.searchParams().get("redirect_url")) || context.clerk.buildAfterSignInUrl()
          }
        };
      })
    },
    "FORM.ATTACH": {
      description: "Attach/re-attach the form to the router.",
      actions: enqueueActions2(({ enqueue, event }) => {
        enqueue.assign({
          formRef: event.formRef
        });
        enqueue.raise({ type: "RESET.STEP" });
      })
    },
    "NAVIGATE.PREVIOUS": ".Hist",
    "NAVIGATE.START": ".Start",
    LOADING: {
      actions: assign4(({ event }) => ({
        loading: {
          isLoading: event.isLoading,
          step: event.step,
          strategy: event.strategy,
          action: event.action
        }
      }))
    },
    RESET: ".Idle"
  },
  states: {
    Idle: {
      invoke: {
        id: "webAuthnAutofill",
        src: "webAuthnAutofillSupport",
        onDone: {
          actions: assign4({ webAuthnAutofillSupport: ({ event }) => event.output })
        }
      },
      on: {
        INIT: {
          actions: assign4(({ event }) => ({
            clerk: event.clerk,
            exampleMode: event.exampleMode || false,
            formRef: event.formRef,
            loading: {
              isLoading: false
            },
            router: event.router,
            signUpPath: event.signUpPath || SIGN_UP_DEFAULT_BASE_PATH
          })),
          target: "Init"
        }
      }
    },
    Init: {
      entry: enqueueActions2(({ context, enqueue, self }) => {
        var _a, _b;
        if (!self.getSnapshot().children[ThirdPartyMachineId]) {
          enqueue.spawnChild("thirdPartyMachine", {
            id: ThirdPartyMachineId,
            systemId: ThirdPartyMachineId,
            input: {
              basePath: (_b = (_a = context.router) == null ? void 0 : _a.basePath) != null ? _b : SIGN_IN_DEFAULT_BASE_PATH,
              flow: "signIn",
              formRef: context.formRef,
              parent: self
            }
          });
        }
      }),
      always: [
        {
          guard: "needsCallback",
          target: "Callback"
        },
        {
          guard: "needsChooseSession",
          target: "ChooseSession"
        },
        {
          guard: "isComplete",
          actions: "setActive"
        },
        {
          guard: "isLoggedInAndSingleSession",
          actions: [
            log3("Already logged in"),
            {
              type: "navigateExternal",
              params: ({ context }) => {
                var _a;
                return {
                  path: ((_a = context.router) == null ? void 0 : _a.searchParams().get("redirect_url")) || context.clerk.buildAfterSignInUrl()
                };
              }
            }
          ]
        },
        {
          guard: "needsStart",
          actions: { type: "navigateInternal", params: { force: true, path: "/" } },
          target: "Start"
        },
        {
          guard: "needsFirstFactor",
          actions: { type: "navigateInternal", params: { force: true, path: "/continue" } },
          target: "FirstFactor"
        },
        {
          guard: "needsSecondFactor",
          actions: { type: "navigateInternal", params: { force: true, path: "/continue" } },
          target: "SecondFactor"
        },
        {
          guard: "needsNewPassword",
          actions: { type: "navigateInternal", params: { force: true, path: "/reset-password" } },
          target: "ResetPassword"
        },
        {
          actions: { type: "navigateInternal", params: { force: true, path: "/" } },
          target: "Start"
        }
      ]
    },
    Start: {
      tags: ["step:start"],
      exit: "clearFormErrors",
      invoke: {
        id: "start",
        src: "startMachine",
        input: ({ context, self }) => {
          var _a;
          return {
            basePath: (_a = context.router) == null ? void 0 : _a.basePath,
            formRef: context.formRef,
            parent: self
          };
        },
        onDone: {
          actions: "raiseNext"
        }
      },
      on: {
        "RESET.STEP": {
          target: "Start",
          reenter: true
        },
        "AUTHENTICATE.PASSKEY": {
          actions: sendTo5("start", ({ event }) => event)
        },
        "AUTHENTICATE.PASSKEY.AUTOFILL": {
          actions: sendTo5("start", ({ event }) => event)
        },
        "AUTHENTICATE.WEB3": {
          actions: sendTo5("start", ({ event }) => event)
        },
        NEXT: [
          {
            guard: "isComplete",
            actions: "setActive"
          },
          {
            guard: "statusNeedsFirstFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "FirstFactor"
          },
          {
            guard: "statusNeedsSecondFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "SecondFactor"
          },
          {
            guard: "statusNeedsNewPassword",
            actions: { type: "navigateInternal", params: { path: "/reset-password" } },
            target: "ResetPassword"
          }
        ]
      }
    },
    FirstFactor: {
      tags: ["step:first-factor", "step:verifications"],
      invoke: {
        id: "firstFactor",
        src: "firstFactorMachine",
        input: ({ context, self }) => {
          var _a;
          return {
            formRef: context.formRef,
            parent: self,
            basePath: (_a = context.router) == null ? void 0 : _a.basePath
          };
        },
        onDone: {
          actions: "raiseNext"
        }
      },
      on: {
        "AUTHENTICATE.PASSKEY": {
          actions: sendTo5("firstFactor", ({ event }) => event)
        },
        "RESET.STEP": {
          target: "FirstFactor",
          reenter: true
        },
        NEXT: [
          {
            guard: "isComplete",
            actions: "setActive"
          },
          {
            guard: "statusNeedsSecondFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "SecondFactor"
          },
          {
            guard: "statusNeedsNewPassword",
            actions: { type: "navigateInternal", params: { path: "/reset-password" } },
            target: "ResetPassword"
          }
        ],
        "STRATEGY.UPDATE": {
          description: "Send event to verification machine to update the current strategy.",
          actions: sendTo5("firstFactor", ({ event }) => event),
          target: ".Idle"
        }
      },
      initial: "Idle",
      states: {
        Idle: {
          on: {
            "NAVIGATE.FORGOT_PASSWORD": {
              description: "Navigate to forgot password screen.",
              actions: sendTo5("firstFactor", ({ event }) => event),
              target: "ForgotPassword"
            },
            "NAVIGATE.CHOOSE_STRATEGY": {
              description: "Navigate to choose strategy screen.",
              actions: sendTo5("firstFactor", ({ event }) => event),
              target: "ChoosingStrategy"
            }
          }
        },
        ChoosingStrategy: {
          tags: ["step:choose-strategy"],
          on: {
            "NAVIGATE.PREVIOUS": {
              description: "Go to Idle, and also tell firstFactor to go to Pending",
              target: "Idle",
              actions: sendTo5("firstFactor", { type: "NAVIGATE.PREVIOUS" })
            }
          }
        },
        ForgotPassword: {
          tags: ["step:forgot-password"],
          on: {
            "NAVIGATE.PREVIOUS": "Idle"
          }
        }
      }
    },
    SecondFactor: {
      tags: ["step:second-factor", "step:verifications"],
      invoke: {
        id: "secondFactor",
        src: "secondFactorMachine",
        input: ({ context, self }) => ({
          formRef: context.formRef,
          parent: self
        }),
        onDone: {
          actions: "raiseNext"
        }
      },
      on: {
        "RESET.STEP": {
          target: "SecondFactor",
          reenter: true
        },
        NEXT: [
          {
            guard: "isComplete",
            actions: "setActive"
          },
          {
            guard: "statusNeedsNewPassword",
            actions: { type: "navigateInternal", params: { path: "/reset-password" } },
            target: "ResetPassword"
          }
        ],
        "STRATEGY.UPDATE": {
          description: "Send event to verification machine to update the current strategy.",
          actions: sendTo5("secondFactor", ({ event }) => event),
          target: ".Idle"
        }
      },
      initial: "Idle",
      states: {
        Idle: {
          on: {
            "NAVIGATE.CHOOSE_STRATEGY": {
              description: "Navigate to choose strategy screen.",
              actions: sendTo5("secondFactor", ({ event }) => event),
              target: "ChoosingStrategy"
            }
          }
        },
        ChoosingStrategy: {
          tags: ["step:choose-strategy"],
          on: {
            "NAVIGATE.PREVIOUS": {
              description: "Go to Idle, and also tell firstFactor to go to Pending",
              target: "Idle",
              actions: sendTo5("secondFactor", { type: "NAVIGATE.PREVIOUS" })
            }
          }
        }
      }
    },
    ResetPassword: {
      tags: ["step:reset-password"],
      invoke: {
        id: "resetPassword",
        src: "resetPasswordMachine",
        input: ({ context, self }) => ({
          formRef: context.formRef,
          parent: self
        }),
        onDone: {
          actions: "raiseNext"
        }
      },
      on: {
        "RESET.STEP": {
          target: "ResetPassword",
          reenter: true
        },
        NEXT: [
          {
            guard: "isComplete",
            actions: "setActive"
          },
          {
            guard: "statusNeedsFirstFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "FirstFactor"
          },
          {
            guard: "statusNeedsSecondFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "SecondFactor"
          }
        ]
      }
    },
    Callback: {
      tags: ["step:callback"],
      entry: sendTo5(ThirdPartyMachineId, { type: "CALLBACK" }),
      on: {
        NEXT: [
          {
            guard: "hasOAuthError",
            actions: ["setFormOAuthErrors", { type: "navigateInternal", params: { force: true, path: "/" } }],
            target: "Start"
          },
          {
            guard: or(["isLoggedIn", "isComplete", "hasAuthenticatedViaClerkJS"]),
            actions: "setActive"
          },
          {
            guard: "statusNeedsIdentifier",
            actions: "transfer"
          },
          {
            guard: "statusNeedsFirstFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "FirstFactor"
          },
          {
            guard: "statusNeedsSecondFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "SecondFactor"
          },
          {
            guard: "statusNeedsNewPassword",
            actions: { type: "navigateInternal", params: { path: "/reset-password" } },
            target: "ResetPassword"
          }
        ]
      }
    },
    ChooseSession: {
      tags: ["step:choose-session"],
      on: {
        "SESSION.SET_ACTIVE": {
          actions: {
            type: "setActive",
            params: ({ event }) => ({ id: event.id })
          }
        }
      }
    },
    Error: {
      tags: ["step:error"],
      on: {
        NEXT: {
          target: "Start",
          actions: "clearFormErrors"
        }
      }
    },
    Hist: {
      type: "history",
      exit: "clearFormErrors"
    }
  }
});

// src/internals/machines/utils/formatters.ts
import { titleize } from "@clerk/shared/underscore";
function formatName(...args) {
  switch (args.length) {
    case 0:
      return void 0;
    case 1:
      return titleize(args[0]);
    default:
      return args.filter(Boolean).map(titleize).join(" ");
  }
}
function formatSalutation({
  firstName,
  lastName,
  identifier
}) {
  return firstName && formatName(firstName) || lastName && formatName(lastName) || identifier || "";
}

// src/internals/machines/sign-in/router.selectors.ts
function SignInSafeIdentifierSelectorForStrategy(strategy) {
  return (s) => {
    var _a, _b, _c;
    const signIn = (_a = s.context.clerk) == null ? void 0 : _a.client.signIn;
    if (strategy) {
      const matchingFactors = [
        ...(_b = signIn.supportedFirstFactors) != null ? _b : [],
        ...(_c = signIn.supportedSecondFactors) != null ? _c : []
      ].filter((f) => f.strategy === strategy);
      const matchingFactorForIdentifier = signIn.identifier && matchingFactors.length > 0 ? matchingFactors.find((f) => "safeIdentifier" in f && f.safeIdentifier === signIn.identifier) : null;
      const matchingFactorForStrategy = matchingFactors[0];
      if (matchingFactorForIdentifier && "safeIdentifier" in matchingFactorForIdentifier) {
        return matchingFactorForIdentifier.safeIdentifier;
      }
      if (matchingFactorForStrategy && "safeIdentifier" in matchingFactorForStrategy) {
        return matchingFactorForStrategy.safeIdentifier;
      }
    }
    return signIn.identifier || "";
  };
}
function SignInSalutationSelector(s) {
  var _a, _b, _c;
  const signIn = (_a = s.context.clerk) == null ? void 0 : _a.client.signIn;
  return formatSalutation({
    firstName: (_b = signIn == null ? void 0 : signIn.userData) == null ? void 0 : _b.firstName,
    identifier: signIn == null ? void 0 : signIn.identifier,
    lastName: (_c = signIn == null ? void 0 : signIn.userData) == null ? void 0 : _c.lastName
  });
}

// src/internals/machines/sign-in/router.types.ts
var SignInRouterSystemId = {
  start: "start",
  firstFactor: "firstFactor",
  secondFactor: "secondFactor",
  resetPassword: "resetPassword"
};

// src/react/sign-in/choose-strategy.tsx
import { jsx as jsx9 } from "react/jsx-runtime";
var SignInChooseStrategyCtx = createContextForDomValidation("SignInChooseStrategyCtx");
function SignInChooseStrategy({ asChild, children, ...props }) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeStateFirstFactor = useActiveTags(
    routerRef,
    ["step:verifications", "step:first-factor", "step:choose-strategy"],
    ActiveTagsMode.all
  );
  const activeStateSecondFactor = useActiveTags(
    routerRef,
    ["step:verifications", "step:second-factor", "step:choose-strategy"],
    ActiveTagsMode.all
  );
  const activeState = activeStateFirstFactor || activeStateSecondFactor;
  const Comp = asChild ? Slot5 : "div";
  return activeState ? /* @__PURE__ */ jsx9(SignInChooseStrategyCtx.Provider, { children: /* @__PURE__ */ jsx9(Comp, { ...props, children }) }) : null;
}
function SignInForgotPassword({ asChild, children, ...props }) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(
    routerRef,
    ["step:verifications", "step:first-factor", "step:forgot-password"],
    ActiveTagsMode.all
  );
  const Comp = asChild ? Slot5 : "div";
  return activeState ? /* @__PURE__ */ jsx9(SignInChooseStrategyCtx.Provider, { children: /* @__PURE__ */ jsx9(Comp, { ...props, children }) }) : null;
}
var SUPPORTED_STRATEGY_NAME = "SignInSupportedStrategy";
var SignInSupportedStrategy = React18.forwardRef(
  ({ asChild, children, name, ...rest }, forwardedRef) => {
    const routerRef = SignInRouterCtx.useActorRef();
    const snapshot = routerRef.getSnapshot();
    const status = snapshot.context.clerk.client.signIn.status;
    const supportedFirstFactors = status === "needs_first_factor" ? snapshot.context.clerk.client.signIn.supportedFirstFactors || [] : [];
    const supportedSecondFactors = status === "needs_second_factor" ? snapshot.context.clerk.client.signIn.supportedSecondFactors || [] : [];
    const factor = [...supportedFirstFactors, ...supportedSecondFactors].find((factor2) => name === factor2.strategy);
    const currentFactor = useSelector3(
      snapshot.children[SignInRouterSystemId.firstFactor] || snapshot.children[SignInRouterSystemId.secondFactor],
      (state) => {
        var _a;
        return (_a = state == null ? void 0 : state.context.currentFactor) == null ? void 0 : _a.strategy;
      }
    );
    const sendUpdateStrategyEvent = React18.useCallback(
      () => routerRef.send({ type: "STRATEGY.UPDATE", factor }),
      [routerRef, factor]
    );
    if (currentFactor === name) {
      return null;
    }
    const Comp = asChild ? Slot5 : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    return factor ? /* @__PURE__ */ jsx9(SignInStrategyContext.Provider, { value: { strategy: name }, children: /* @__PURE__ */ jsx9(
      Comp,
      {
        ...defaultProps,
        ...rest,
        ref: forwardedRef,
        onClick: sendUpdateStrategyEvent,
        children: children || factor.strategy
      }
    ) }) : null;
  }
);
SignInSupportedStrategy.displayName = SUPPORTED_STRATEGY_NAME;

// src/react/sign-in/reset-password.tsx
import { jsx as jsx10 } from "react/jsx-runtime";
var SignInResetPasswordCtx = createContextFromActorRef("SignInResetPasswordCtx");
function SignInResetPassword(props) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, "step:reset-password");
  return activeState ? /* @__PURE__ */ jsx10(SignInResetPasswordInner, { ...props }) : null;
}
function SignInResetPasswordInner(props) {
  const ref = useSignInResetPasswordStep();
  if (!ref) {
    return null;
  }
  return /* @__PURE__ */ jsx10(SignInResetPasswordCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ jsx10(
    Form,
    {
      flowActor: ref,
      ...props
    }
  ) });
}

// src/react/sign-in/start.tsx
import { jsx as jsx11 } from "react/jsx-runtime";
var SignInStartCtx = createContextFromActorRef("SignInStartCtx");
function SignInStart(props) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, "step:start");
  return activeState ? /* @__PURE__ */ jsx11(SignInStartInner, { ...props }) : null;
}
function SignInStartInner(props) {
  const ref = useSignInStartStep();
  if (!ref) {
    return null;
  }
  return /* @__PURE__ */ jsx11(SignInStartCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ jsx11(
    Form,
    {
      flowActor: ref,
      ...props
    }
  ) });
}

// src/react/sign-in/verifications.tsx
import { useSelector as useSelector4 } from "@xstate/react";
import { useCallback as useCallback6, useEffect as useEffect5 } from "react";

// src/internals/machines/utils/strategies.ts
var matchStrategy = (current, desired) => {
  if (!current || !desired) {
    return false;
  }
  if (current === desired) {
    return true;
  }
  return current.startsWith(`${desired}_`);
};

// src/react/sign-in/verifications.tsx
import { jsx as jsx12 } from "react/jsx-runtime";
var SignInFirstFactorCtx = createContextFromActorRef("SignInFirstFactorCtx");
var SignInSecondFactorCtx = createContextFromActorRef("SignInSecondFactorCtx");
var strategiesSelector = (state) => {
  var _a;
  return (_a = state.context.currentFactor) == null ? void 0 : _a.strategy;
};
function SignInStrategiesProvider({
  children,
  preferred,
  actorRef,
  ...props
}) {
  const routerRef = SignInRouterCtx.useActorRef();
  const current = useSelector4(actorRef, strategiesSelector);
  const isChoosingAltStrategy = useActiveTags(routerRef, ["step:choose-strategy", "step:forgot-password"]);
  const isActive = useCallback6((name) => current ? matchStrategy(current, name) : false, [current]);
  return /* @__PURE__ */ jsx12(StrategiesContext.Provider, { value: { current, preferred, isActive }, children: isChoosingAltStrategy.active ? null : /* @__PURE__ */ jsx12(
    Form,
    {
      flowActor: actorRef,
      ...props,
      children
    }
  ) });
}
function useFactorCtx() {
  const firstFactorRef = SignInFirstFactorCtx.useActorRef(true);
  const secondFactorRef = SignInSecondFactorCtx.useActorRef(true);
  return firstFactorRef || secondFactorRef;
}
function SignInStrategy({ children, name }) {
  const { active } = useStrategy(name);
  const factorCtx = useFactorCtx();
  useEffect5(() => {
    if (factorCtx) {
      factorCtx.send({ type: "STRATEGY.REGISTER", factor: name });
    }
    return () => {
      if ((factorCtx == null ? void 0 : factorCtx.getSnapshot().status) === "active") {
        factorCtx.send({ type: "STRATEGY.UNREGISTER", factor: name });
      }
    };
  }, [factorCtx, name]);
  return active ? /* @__PURE__ */ jsx12(SignInStrategyContext.Provider, { value: { strategy: name }, children }) : null;
}
function SignInVerifications(props) {
  const routerRef = SignInRouterCtx.useActorRef();
  const { activeTags: activeRoutes } = useActiveTags(routerRef, ["step:first-factor", "step:second-factor"]);
  if (activeRoutes.has("step:first-factor")) {
    return /* @__PURE__ */ jsx12(SignInFirstFactorInner, { ...props });
  }
  if (activeRoutes.has("step:second-factor")) {
    return /* @__PURE__ */ jsx12(SignInSecondFactorInner, { ...props });
  }
  return null;
}
function SignInFirstFactor(props) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, "step:first-factor");
  return activeState ? /* @__PURE__ */ jsx12(SignInFirstFactorInner, { ...props }) : null;
}
function SignInSecondFactor(props) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, "step:second-factor");
  return activeState ? /* @__PURE__ */ jsx12(SignInSecondFactorInner, { ...props }) : null;
}
function SignInFirstFactorInner(props) {
  const ref = useSignInFirstFactorStep();
  if (!ref) {
    return null;
  }
  return ref ? /* @__PURE__ */ jsx12(SignInFirstFactorCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ jsx12(
    SignInStrategiesProvider,
    {
      actorRef: ref,
      ...props
    }
  ) }) : null;
}
function SignInSecondFactorInner(props) {
  const ref = useSignInSecondFactorStep();
  if (!ref) {
    return null;
  }
  return ref ? /* @__PURE__ */ jsx12(SignInSecondFactorCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ jsx12(
    SignInStrategiesProvider,
    {
      actorRef: ref,
      ...props
    }
  ) }) : null;
}

// src/react/sign-in/step.tsx
import { jsx as jsx13 } from "react/jsx-runtime";
var SIGN_IN_STEPS = {
  start: "start",
  verifications: "verifications",
  "choose-strategy": "choose-strategy",
  "choose-session": "choose-session",
  "forgot-password": "forgot-password",
  "reset-password": "reset-password"
};
function SignInStep(props) {
  var _a;
  const clerk = useClerk4();
  (_a = clerk.telemetry) == null ? void 0 : _a.record(eventComponentMounted2("Elements_SignInStep", { name: props.name }));
  switch (props.name) {
    case SIGN_IN_STEPS.start:
      return /* @__PURE__ */ jsx13(SignInStart, { ...props });
    case SIGN_IN_STEPS.verifications:
      return /* @__PURE__ */ jsx13(SignInVerifications, { ...props });
    case SIGN_IN_STEPS["choose-strategy"]:
      return /* @__PURE__ */ jsx13(SignInChooseStrategy, { ...props });
    case SIGN_IN_STEPS["forgot-password"]:
      return /* @__PURE__ */ jsx13(SignInForgotPassword, { ...props });
    case SIGN_IN_STEPS["reset-password"]:
      return /* @__PURE__ */ jsx13(SignInResetPassword, { ...props });
    case SIGN_IN_STEPS["choose-session"]:
      return /* @__PURE__ */ jsx13(SignInChooseSession, { ...props });
    default:
      throw new ClerkElementsRuntimeError(`Invalid step name. Use: ${Object.keys(SIGN_IN_STEPS).join(",")}.`);
  }
}

// src/react/sign-up/step.tsx
import { useClerk as useClerk5 } from "@clerk/shared/react";
import { eventComponentMounted as eventComponentMounted3 } from "@clerk/shared/telemetry";

// src/react/sign-up/continue.tsx
import { jsx as jsx14 } from "react/jsx-runtime";
var SignUpContinueCtx = createContextFromActorRef("SignUpContinueCtx");
function SignUpContinue(props) {
  const routerRef = SignUpRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, "step:continue");
  return activeState ? /* @__PURE__ */ jsx14(SignUpContinueInner, { ...props }) : null;
}
function SignUpContinueInner(props) {
  const ref = useSignUpContinueStep();
  if (!ref) {
    return null;
  }
  return /* @__PURE__ */ jsx14(SignUpContinueCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ jsx14(
    Form,
    {
      flowActor: ref,
      ...props
    }
  ) });
}

// src/react/sign-up/start.tsx
import { jsx as jsx15 } from "react/jsx-runtime";
var SignUpStartCtx = createContextFromActorRef("SignUpStartCtx");
function SignUpStart(props) {
  const routerRef = SignUpRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, "step:start");
  return activeState ? /* @__PURE__ */ jsx15(SignUpStartInner, { ...props }) : null;
}
function SignUpStartInner(props) {
  const ref = useSignUpStartStep();
  if (!ref) {
    return null;
  }
  return /* @__PURE__ */ jsx15(SignUpStartCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ jsx15(
    Form,
    {
      flowActor: ref,
      ...props
    }
  ) });
}

// src/react/sign-up/verifications.tsx
import { Fragment as Fragment3, jsx as jsx16 } from "react/jsx-runtime";
var SignUpVerificationCtx = createContextFromActorRef("SignUpVerificationCtx");
function SignUpVerifications(props) {
  const ref = SignUpRouterCtx.useActorRef();
  const activeState = useActiveTags(ref, "step:verification");
  return activeState ? /* @__PURE__ */ jsx16(SignUpVerifyInner, { ...props }) : null;
}
function SignUpVerifyInner(props) {
  const ref = useSignUpVerificationStep();
  if (!ref) {
    return null;
  }
  return /* @__PURE__ */ jsx16(SignUpVerificationCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ jsx16(
    Form,
    {
      flowActor: ref,
      ...props
    }
  ) });
}
function SignUpStrategy({ children, name: tag }) {
  const ref = SignUpVerificationCtx.useActorRef(true);
  if (!ref) {
    throw new Error(
      '<Strategy> used outside of <SignUp>. Did you mean to `import { Strategy } from "@clerk/elements/sign-in"` instead?'
    );
  }
  const { active } = useActiveTags(ref, [
    `verification:${tag}`,
    `verification:category:${tag}`
  ]);
  return active ? /* @__PURE__ */ jsx16(Fragment3, { children }) : null;
}

// src/react/sign-up/step.tsx
import { jsx as jsx17 } from "react/jsx-runtime";
var SIGN_UP_STEPS = {
  start: "start",
  continue: "continue",
  verifications: "verifications"
};
function SignUpStep(props) {
  var _a;
  const clerk = useClerk5();
  (_a = clerk.telemetry) == null ? void 0 : _a.record(eventComponentMounted3("Elements_SignUpStep", { name: props.name }));
  switch (props.name) {
    case SIGN_UP_STEPS.start:
      return /* @__PURE__ */ jsx17(SignUpStart, { ...props });
    case SIGN_UP_STEPS.continue:
      return /* @__PURE__ */ jsx17(SignUpContinue, { ...props });
    case SIGN_UP_STEPS.verifications:
      return /* @__PURE__ */ jsx17(SignUpVerifications, { ...props });
    default:
      throw new ClerkElementsRuntimeError(`Invalid step name. Use 'start', 'continue', or 'verifications'.`);
  }
}

// src/react/utils/map-scope-to-strategy.ts
function isProviderStrategyScope(value) {
  return value.startsWith("provider:");
}
function mapScopeToStrategy(scope) {
  if (scope === "provider:metamask") {
    return "web3_metamask_signature";
  }
  if (scope === "provider:coinbase_wallet") {
    return "web3_coinbase_wallet_signature";
  }
  if (scope === "provider:saml") {
    return "saml";
  }
  const scopeWithoutPrefix = scope.replace("provider:", "");
  return `oauth_${scopeWithoutPrefix}`;
}

// src/react/common/loading.tsx
import { jsx as jsx18 } from "react/jsx-runtime";
function isSignInScope(scope) {
  if (!scope) {
    return true;
  }
  if (scope.startsWith("step:")) {
    return Object.prototype.hasOwnProperty.call(SIGN_IN_STEPS, scope.replace("step:", ""));
  }
  return true;
}
function isSignUpScope(scope) {
  if (!scope) {
    return true;
  }
  if (scope.startsWith("step:")) {
    return Object.prototype.hasOwnProperty.call(SIGN_UP_STEPS, scope.replace("step:", ""));
  }
  return true;
}
function Loading({ children, scope }) {
  var _a;
  const clerk = useClerk6();
  (_a = clerk.telemetry) == null ? void 0 : _a.record(eventComponentMounted4("Elements_Loading", { scope: scope != null ? scope : false }));
  const signInRouterRef = SignInRouterCtx.useActorRef(true);
  const signUpRouterRef = SignUpRouterCtx.useActorRef(true);
  if (!signInRouterRef && !signUpRouterRef) {
    throw new ClerkElementsRuntimeError(`<Loading> must be used within a <SignIn> or <SignUp> component.`);
  }
  if (signInRouterRef) {
    if (isSignInScope(scope)) {
      return /* @__PURE__ */ jsx18(
        SignInLoading,
        {
          scope,
          routerRef: signInRouterRef,
          children
        }
      );
    } else {
      throw new ClerkElementsRuntimeError(`Invalid scope "${scope}" used for <Loading> inside <SignIn>.`);
    }
  }
  if (signUpRouterRef) {
    if (isSignUpScope(scope)) {
      return /* @__PURE__ */ jsx18(
        SignUpLoading,
        {
          scope,
          routerRef: signUpRouterRef,
          children
        }
      );
    } else {
      throw new ClerkElementsRuntimeError(`Invalid scope "${scope}" used for <Loading> inside <SignUp>.`);
    }
  }
  throw new ClerkElementsRuntimeError("Invalid state for <Loading>. Please open an issue.");
}
function SignInLoading({ children, scope, routerRef }) {
  const [isLoading, { step: loadingStep, strategy, action }] = useLoading(routerRef);
  const tags = useSelector5(routerRef, (s) => s.tags);
  const isStepLoading = (step) => isLoading && loadingStep === step;
  const isInferredStepLoading = (step) => tags.has(`step:${step}`) && isStepLoading(step);
  let loadingResult = false;
  if (scope === "global") {
    loadingResult = isLoading;
  } else if (scope && isProviderStrategyScope(scope)) {
    loadingResult = isLoading && loadingStep === void 0 && strategy === mapScopeToStrategy(scope);
  } else if (scope) {
    loadingResult = isStepLoading(scope.replace("step:", "")) || scope === action;
  } else {
    loadingResult = isInferredStepLoading("start") || isInferredStepLoading("verifications") || isInferredStepLoading("choose-strategy") || isInferredStepLoading("forgot-password") || isInferredStepLoading("reset-password");
  }
  return children(loadingResult);
}
function SignUpLoading({ children, scope, routerRef }) {
  const [isLoading, { step: loadingStep, strategy, action }] = useLoading(routerRef);
  const tags = useSelector5(routerRef, (s) => s.tags);
  const isStepLoading = (step) => isLoading && loadingStep === step;
  const isInferredStepLoading = (step) => tags.has(`step:${step}`) && isStepLoading(step);
  let loadingResult = false;
  if (scope === "global") {
    loadingResult = isLoading;
  } else if (scope && isProviderStrategyScope(scope)) {
    loadingResult = isLoading && loadingStep === void 0 && strategy === mapScopeToStrategy(scope);
  } else if (scope) {
    loadingResult = isStepLoading(scope.replace("step:", "")) || scope === action;
  } else {
    loadingResult = isInferredStepLoading("start") || isInferredStepLoading("continue") || isInferredStepLoading("verifications");
  }
  return children(loadingResult);
}

export {
  __privateGet,
  __privateAdd,
  __privateSet,
  ClerkElementsError,
  ClerkElementsRuntimeError,
  inspect,
  FormStoreProvider,
  useFormStore,
  Field,
  FieldError,
  FieldState,
  Form,
  GlobalError,
  SignInRouterCtx,
  useSignInStrategy,
  Input,
  Label,
  Submit,
  SignUpRouterCtx,
  Connection,
  Icon,
  useSignInActiveSessionContext,
  SignInSessionList,
  SignInSessionListItem,
  SSO_CALLBACK_PATH_ROUTE,
  MAGIC_LINK_VERIFY_PATH_ROUTE,
  SIGN_IN_DEFAULT_BASE_PATH,
  SIGN_UP_DEFAULT_BASE_PATH,
  SEARCH_PARAMS,
  RESENDABLE_COUNTDOWN_DEFAULT,
  CAPTCHA_ELEMENT_ID,
  ERROR_CODES,
  ROUTING,
  sendToLoading,
  assertActorEventError,
  ThirdPartyMachineId,
  ThirdPartyMachine,
  shouldUseVirtualRouting,
  SignInRouterMachine,
  SignInSafeIdentifierSelectorForStrategy,
  SignInSalutationSelector,
  SignInSupportedStrategy,
  SignInFirstFactorCtx,
  SignInSecondFactorCtx,
  SignInStrategy,
  SignInFirstFactor,
  SignInSecondFactor,
  SignInStep,
  SignUpStartCtx,
  SignUpVerificationCtx,
  SignUpStrategy,
  SignUpStep,
  Loading
};
//# sourceMappingURL=chunk-HGZR4OAT.mjs.map