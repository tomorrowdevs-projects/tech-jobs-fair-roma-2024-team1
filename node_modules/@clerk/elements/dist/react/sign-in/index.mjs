import {
  Router,
  useClerkRouter,
  usePathnameWithoutCatchAll,
  useVirtualRouter
} from "../../chunk-XKBOG4CI.mjs";
import {
  Form,
  FormStoreProvider,
  ROUTING,
  SIGN_IN_DEFAULT_BASE_PATH,
  SIGN_UP_DEFAULT_BASE_PATH,
  SignInFirstFactor,
  SignInFirstFactorCtx,
  SignInRouterCtx,
  SignInRouterMachine,
  SignInSafeIdentifierSelectorForStrategy,
  SignInSalutationSelector,
  SignInSecondFactor,
  SignInSecondFactorCtx,
  SignInSessionList,
  SignInSessionListItem,
  SignInStep,
  SignInStrategy,
  SignInSupportedStrategy,
  Submit,
  inspect,
  useFormStore,
  useSignInActiveSessionContext,
  useSignInStrategy
} from "../../chunk-HGZR4OAT.mjs";

// src/react/sign-in/index.ts
import "client-only";

// src/react/sign-in/root.tsx
import { useClerk } from "@clerk/shared/react";
import { useClerkHostRouter } from "@clerk/shared/router";
import { eventComponentMounted } from "@clerk/shared/telemetry";
import { useSelector } from "@xstate/react";
import { useEffect } from "react";
import { createActor } from "xstate";
import { jsx, jsxs } from "react/jsx-runtime";
var actor = createActor(SignInRouterMachine, { inspect });
actor.start();
function SignInFlowProvider({ children, exampleMode, fallback, isRootPath }) {
  const clerk = useClerk();
  const router = useClerkRouter();
  const formRef = useFormStore();
  const isReady = useSelector(actor, (state) => state.value !== "Idle");
  useEffect(() => {
    if (!clerk || !router) {
      return;
    }
    const cb = () => {
      const evt = {
        type: "INIT",
        clerk,
        exampleMode,
        formRef,
        router,
        signUpPath: SIGN_UP_DEFAULT_BASE_PATH
      };
      if (actor.getSnapshot().can(evt)) {
        actor.send(evt);
      }
    };
    if ("addOnLoaded" in clerk) {
      clerk.addOnLoaded(cb);
    } else {
      cb();
    }
    if (formRef && actor.getSnapshot().can({ type: "RESET.STEP" })) {
      actor.send({
        type: "FORM.ATTACH",
        formRef
      });
    }
  }, [clerk, exampleMode, formRef == null ? void 0 : formRef.id, !!router, clerk.loaded]);
  return /* @__PURE__ */ jsxs(SignInRouterCtx.Provider, { actorRef: actor, children: [
    isRootPath && !isReady && fallback ? /* @__PURE__ */ jsx(Form, { children: fallback }) : null,
    clerk.loaded && isReady ? children : null
  ] });
}
function SignInRoot({
  children,
  exampleMode = false,
  fallback = null,
  path: pathProp,
  routing = ROUTING.path
}) {
  var _a;
  const clerk = useClerk();
  const inferredPath = usePathnameWithoutCatchAll();
  const path = pathProp || inferredPath || SIGN_IN_DEFAULT_BASE_PATH;
  (_a = clerk.telemetry) == null ? void 0 : _a.record(
    eventComponentMounted("Elements_SignInRoot", {
      exampleMode,
      fallback: Boolean(fallback),
      path,
      routing
    })
  );
  const router = (routing === ROUTING.virtual ? useVirtualRouter : useClerkHostRouter)();
  const isRootPath = path === router.pathname();
  return /* @__PURE__ */ jsx(
    Router,
    {
      basePath: path,
      router,
      children: /* @__PURE__ */ jsx(FormStoreProvider, { children: /* @__PURE__ */ jsx(
        SignInFlowProvider,
        {
          exampleMode,
          fallback,
          isRootPath,
          children
        }
      ) })
    }
  );
}

// src/react/sign-in/action/action.tsx
import * as React5 from "react";

// src/react/sign-in/action/navigate.tsx
import { Slot } from "@radix-ui/react-slot";
import * as React2 from "react";
import { jsx as jsx2 } from "react/jsx-runtime";
var SIGN_IN_NAVIGATE_NAME = "SignInNavigate";
var SignInNavigationEventMap = {
  start: "NAVIGATE.START",
  previous: "NAVIGATE.PREVIOUS",
  "choose-strategy": "NAVIGATE.CHOOSE_STRATEGY",
  "forgot-password": "NAVIGATE.FORGOT_PASSWORD"
};
var SignInNavigate = React2.forwardRef(
  ({ asChild, to, ...rest }, forwardedRef) => {
    const actorRef = SignInRouterCtx.useActorRef();
    const Comp = asChild ? Slot : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    const sendEvent = React2.useCallback(() => {
      const type = SignInNavigationEventMap[to];
      if (actorRef.getSnapshot().can({ type })) {
        actorRef.send({ type });
      } else {
        console.warn(
          `Clerk: <SignIn.Action navigate="${to}"> is an invalid navigation event. You can only navigate to: ${Object.keys(SignInNavigationEventMap).join(", ")}.`
        );
      }
    }, [actorRef, to]);
    return /* @__PURE__ */ jsx2(
      Comp,
      {
        ...defaultProps,
        ...rest,
        onClick: sendEvent,
        ref: forwardedRef
      }
    );
  }
);
SignInNavigate.displayName = SIGN_IN_NAVIGATE_NAME;

// src/react/sign-in/action/resend.tsx
import { Slot as Slot2 } from "@radix-ui/react-slot";
import { useSelector as useSelector2 } from "@xstate/react";
import * as React3 from "react";
import { jsx as jsx3 } from "react/jsx-runtime";
var SIGN_IN_RESEND_NAME = "SignInResend";
var SignInResend = React3.forwardRef(
  ({ asChild, fallback, ...rest }, forwardedRef) => {
    const firstFactorRef = SignInFirstFactorCtx.useActorRef(true);
    const secondFactorRef = SignInSecondFactorCtx.useActorRef(true);
    const actorRef = firstFactorRef || secondFactorRef;
    if (!actorRef) {
      throw new Error('The resend action must be used within <SignIn.Step name="verifications">.');
    }
    const fallbackProps = useSelector2(
      actorRef,
      (state) => ({
        resendable: state.context.resendable,
        resendableAfter: state.context.resendableAfter
      }),
      (a, b) => a.resendableAfter === b.resendableAfter && a.resendable === b.resendable
    );
    if (fallback && !fallbackProps.resendable) {
      return typeof fallback === "function" ? fallback(fallbackProps) : fallback;
    }
    const Comp = asChild ? Slot2 : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    return /* @__PURE__ */ jsx3(
      Comp,
      {
        ...defaultProps,
        ...rest,
        disabled: !fallbackProps.resendable,
        onClick: () => actorRef.send({ type: "RETRY" }),
        ref: forwardedRef
      }
    );
  }
);
SignInResend.displayName = SIGN_IN_RESEND_NAME;

// src/react/sign-in/action/set-active-session.tsx
import { Slot as Slot3 } from "@radix-ui/react-slot";
import * as React4 from "react";
import { jsx as jsx4 } from "react/jsx-runtime";
var DISPLAY_NAME = "SignInSetActiveSession";
var SignInSetActiveSession = React4.forwardRef(
  ({ asChild, ...rest }, forwardedRef) => {
    const actorRef = SignInRouterCtx.useActorRef();
    const session = useSignInActiveSessionContext();
    const Comp = asChild ? Slot3 : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    const sendEvent = React4.useCallback(() => {
      const event = { type: "SESSION.SET_ACTIVE", id: session.id };
      if (actorRef.getSnapshot().can(event)) {
        actorRef.send(event);
      } else {
        console.warn(
          `Clerk: <SignIn.Action setActiveSession> is an invalid event. You can only choose an active session from <SignIn.Step name="choose-session">.`
        );
      }
    }, [actorRef, session.id]);
    return /* @__PURE__ */ jsx4(
      Comp,
      {
        ...defaultProps,
        ...rest,
        onClick: sendEvent,
        ref: forwardedRef
      }
    );
  }
);
SignInSetActiveSession.displayName = DISPLAY_NAME;

// src/react/sign-in/action/action.tsx
import { jsx as jsx5 } from "react/jsx-runtime";
var DISPLAY_NAME2 = "SignInAction";
var SignInAction = React5.forwardRef((props, forwardedRef) => {
  const { submit, navigate, resend, setActiveSession, ...rest } = props;
  let Comp;
  if (submit) {
    Comp = Submit;
  } else if (navigate) {
    Comp = SignInNavigate;
  } else if (resend) {
    Comp = SignInResend;
  } else if (setActiveSession) {
    Comp = SignInSetActiveSession;
  }
  return Comp ? /* @__PURE__ */ jsx5(
    Comp,
    {
      to: navigate,
      ...rest,
      ref: forwardedRef
    }
  ) : null;
});
SignInAction.displayName = DISPLAY_NAME2;

// src/react/sign-in/passkey.tsx
import { Slot as Slot4 } from "@radix-ui/react-slot";
import * as React6 from "react";
import { jsx as jsx6 } from "react/jsx-runtime";
var SIGN_IN_PASSKEY_NAME = "SignInPasskey";
var SignInPasskey = React6.forwardRef(
  ({ asChild, ...rest }, forwardedRef) => {
    const actorRef = SignInRouterCtx.useActorRef(true);
    const Comp = asChild ? Slot4 : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    const sendEvent = React6.useCallback(() => {
      actorRef == null ? void 0 : actorRef.send({ type: "AUTHENTICATE.PASSKEY" });
    }, [actorRef]);
    return /* @__PURE__ */ jsx6(
      Comp,
      {
        ...defaultProps,
        ...rest,
        onClick: sendEvent,
        ref: forwardedRef
      }
    );
  }
);
SignInPasskey.displayName = SIGN_IN_PASSKEY_NAME;

// src/react/sign-in/identifiers.tsx
import { useMemo } from "react";
function SignInSafeIdentifier({ transform }) {
  const strategy = useSignInStrategy();
  const selector = useMemo(() => SignInSafeIdentifierSelectorForStrategy(strategy), [strategy]);
  const safeIdentifier = SignInRouterCtx.useSelector(selector);
  if (transform) {
    return transform(safeIdentifier);
  }
  return safeIdentifier;
}
function SignInSalutation() {
  return SignInRouterCtx.useSelector(SignInSalutationSelector);
}
export {
  SignInAction as Action,
  SignInFirstFactor as FirstFactor,
  SignInPasskey as Passkey,
  SignInRoot as Root,
  SignInSafeIdentifier as SafeIdentifier,
  SignInSalutation as Salutation,
  SignInSecondFactor as SecondFactor,
  SignInSessionList as SessionList,
  SignInSessionListItem as SessionListItem,
  SignInRoot as SignIn,
  SignInStep as Step,
  SignInStrategy as Strategy,
  SignInSupportedStrategy as SupportedStrategy
};
//# sourceMappingURL=index.mjs.map